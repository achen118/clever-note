# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

User.destroy_all
Note.destroy_all
Notebook.destroy_all
Tag.destroy_all
Tagging.destroy_all

user1 = User.create!(email: "demo@appacademy.io", username: "demo", image_url: "https://res.cloudinary.com/malice/image/upload/c_scale,w_100/v1500414084/default-profile-pic_bhulg4.svg", password: "password");

notebook1 = Notebook.create!(title: "App Academy", author_id: user1.id)
notebook2 = Notebook.create!(title: "Shopping Lists", author_id: user1.id)
notebook3 = Notebook.create!(title: "To-Dos", author_id: user1.id)
notebook4 = Notebook.create!(title: "Gym", author_id: user1.id)
notebook5 = Notebook.create!(title: "Misc", author_id: user1.id)
notebook6 = Notebook.create!(title: "Food", author_id: user1.id)
notebook7 = Notebook.create!(title: "Christmas Gift Ideas", author_id: user1.id)
notebook8 = Notebook.create!(title: "Movie Ideas", author_id: user1.id)
notebook9 = Notebook.create!(title: "Schedules", author_id: user1.id)
notebook10 = Notebook.create!(title: "Evernote", author_id: user1.id)

note1 = Note.create!(title: "React", body: "<p><strong style='color: rgb(0, 102, 204);'' class='ql-size-large'>A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES</strong></p><p><strong class='ql-size-large'>Declarative</strong></p><p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug.</p><p><br></p><p><strong class='ql-size-large'>Component-Based</strong></p><p>Build encapsulated components that manage their own state, then compose them to make complex UIs.</p><p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the&nbsp;DOM.</p><p><br></p><p><strong class='ql-size-large'>Learn&nbsp;Once, Write&nbsp;Anywhere</strong></p><p>We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using&nbsp;React Native.</p>", plain_text_body: "A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES Declarative React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug. Component-Based Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM. Learn Once, Write Anywhere We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.", author_id: user1.id, notebook_id: notebook1.id)

note2 = Note.create!(title: "jQuery", body: "<p><strong class='ql-size-large' style='color: rgb(230, 0, 0);'>What is jQuery?</strong></p><p><br></p><p>jQuery is a lightweight, 'write less, do more', JavaScript library.</p><p>The purpose of jQuery is to make it much easier to use JavaScript on your website.</p><p>jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.</p><p>jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.</p><p><br></p><p>The jQuery library contains the following features:</p><ul><li>HTML/DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul><p><br></p><p><strong class='ql-size-large' style='color: rgb(230, 0, 0);'>Why jQuery?</strong></p><p><br></p><p>There are lots of other JavaScript frameworks out there, but jQuery seems to be the most popular, and also the most extendable.</p><p>Many of the biggest companies on the Web use jQuery, such as:</p><p><br></p><ul><li>Google</li><li>Microsoft</li><li>IBM</li><li>Netflix</li></ul><p><br></p><p><br></p>", plain_text_body: "What is jQuery? jQuery is a lightweight, 'write less, do more', JavaScript library. The purpose of jQuery is to make it much easier to use JavaScript on your website. jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code. jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation. The jQuery library contains the following features: HTML/DOM manipulation CSS manipulation HTML event methods Effects and animations AJAX Utilities Why jQuery? There are lots of other JavaScript frameworks out there, but jQuery seems to be the most popular, and also the most extendable. Many of the biggest companies on the Web use jQuery, such as: Google Microsoft IBM Netflix", author_id: user1.id, notebook_id: notebook1.id)

note3 = Note.create!(title: "Getting Started", body: "<h1><strong>Hello World</strong></h1><p>The easiest way to get started with React is to use&nbsp;<a href='http://codepen.io/gaearon/pen/ZpvBNJ?editors=0010' target='_blank' style='color: rgb(192, 91, 77);'>this Hello World example code on CodePen</a>. You don't need to install anything; you can just open it in another tab and follow along as we go through examples. If you'd rather use a local development environment, check out the&nbsp;<a href='https://facebook.github.io/react/docs/installation.html' target='_blank' style='color: rgb(192, 91, 77);'>Installation</a>&nbsp;page.</p><p><br></p><p>The smallest React example looks like this:</p><pre class='ql-syntax' spellcheck='false'>ReactDOM.render(
  &lt;h1&gt;Hello, world!&lt;/h1&gt;,
  document.getElementById('root')
);
</pre><p><br></p><p>It renders a header saying 'Hello World' on the page.</p><p>The next few sections will gradually introduce you to using React. We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.</p><p><br></p><h2><strong>A Note on JavaScript</strong></h2><p>React is a JavaScript library, and so it assumes you have a basic understanding of the JavaScript language. If you don't feel very confident, we recommend&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript' target='_blank' style='color: rgb(192, 91, 77);'>refreshing your JavaScript knowledge</a>&nbsp;so you can follow along more easily.</p><p>We also use some of the ES6 syntax in the examples. We try to use it sparingly because it's still relatively new, but we encourage you to get familiar with&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions' target='_blank' style='color: rgb(192, 91, 77);'>arrow functions</a>,&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes' target='_blank' style='color: rgb(192, 91, 77);'>classes</a>,&nbsp;<a href='https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals' target='_blank' style='color: rgb(192, 91, 77);'>template literals</a>,&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let' target='_blank' style='color: rgb(192, 91, 77); background-color: rgba(0, 0, 0, 0.04);'><code>let</code></a>, and&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const' target='_blank' style='color: rgb(192, 91, 77); background-color: rgba(0, 0, 0, 0.04);'><code>const</code></a>&nbsp;statements. You can use&nbsp;<a href='http://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&….getElementById('root')%3B%0AReactDOM.render(element%2C%20container)%3B%0A' target='_blank' style='color: rgb(192, 91, 77);'>Babel REPL</a>&nbsp;to check what ES6 code compiles to.</p>", plain_text_body: "Hello World The easiest way to get started with React is to use this Hello World example code on CodePen. You don't need to install anything; you can just open it in another tab and follow along as we go through examples. If you'd rather use a local development environment, check out the Installation page. The smallest React example looks like this: ReactDOM.render( <h1>Hello, world!</h1>, document.getElementById('root') ); It renders a header saying 'Hello World' on the page. The next few sections will gradually introduce you to using React. We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces. A Note on JavaScript
React is a JavaScript library, and so it assumes you have a basic understanding of the JavaScript language. If you don't feel very confident, we recommend refreshing your JavaScript knowledge so you can follow along more easily. We also use some of the ES6 syntax in the examples. We try to use it sparingly because it's still relatively new, but we encourage you to get familiar with arrow functions, classes, template literals, let, and const statements. You can use Babel REPL to check what ES6 code compiles to.", author_id: user1.id, notebook_id: notebook1.id)

note4 = Note.create!(title: "Ruby", body: "<p><span class='ql-size-huge' style='color: rgb(161, 0, 0);'>Ruby Sparkles</span></p><p><br></p><p>Take a true object-oriented language, such as Smalltalk. Drop the unfamiliar syntax and move to more conventional, file-based source code. Now add in a good measure of the flexibility and convenience of languages such as Python and Perl.</p><p><br></p><p>You end up with Ruby.</p><p><br></p><p>OO aficionados will find much to like in Ruby: things such as pure object orientation (everything's an object), metaclasses, closures, iterators, and ubiquitous heterogeneous collections. Smalltalk users will feel right at home (and C++ and Java users will feel jealous).</p><p><br></p><p>At the same time, Perl and Python wizards will find many of their favorite features: full regular expression support, tight integration with the underlying operating system, convenient shortcuts, and dynamic evaluation.</p><p><br></p><p>Ruby is easy to learn. Everyday tasks are simple to code, and once you've done them, they are easy to maintain and grow. Apparently difficult things often turn out not to have been difficult after all. Ruby follows the&nbsp;Principle of Least Surprise---things work the way you would expect them to, with very few special cases or exceptions. And that really&nbsp;does&nbsp;make a difference when you're programming.</p><p><br></p><p>We call Ruby a&nbsp;transparent&nbsp;language. By that we mean that Ruby doesn't obscure the solutions you write behind lots of syntax and the need to churn out reams of support code just to get simple things done. With Ruby you write programs close to the problem domain. Rather than constantly mapping your ideas and designs down to the pedestrian level of most languages, with Ruby you'll find you can express them directly and express them elegantly. This means you code faster. It also means your programs stay readable and maintainable.</p><p><br></p><p>Using Ruby, we are constantly amazed at how much code we can write in one sitting, code that works the first time. There are very few syntax errors, no type violations, and far fewer bugs than usual. This makes sense: there's less to get wrong. No bothersome semicolons to type mechanically at the end of each line. No troublesome type declarations to keep in sync (especially in separate files). No unnecessary words just to keep the compiler happy. No error-prone framework code.</p><p><br></p><p>So why learn Ruby? Because we think it will help you program&nbsp;better. It will help you to focus on the problem at hand, with fewer distractions. It will make your life easier.</p><p><br></p><p><br></p>", plain_text_body: "Ruby Sparkles Take a true object-oriented language, such as Smalltalk. Drop the unfamiliar syntax and move to more conventional, file-based source code. Now add in a good measure of the flexibility and convenience of languages such as Python and Perl. You end up with Ruby. OO aficionados will find much to like in Ruby: things such as pure object orientation (everything's an object), metaclasses, closures, iterators, and ubiquitous heterogeneous collections. Smalltalk users will feel right at home (and C++ and Java users will feel jealous). At the same time, Perl and Python wizards will find many of their favorite features: full regular expression support, tight integration with the underlying operating system, convenient shortcuts, and dynamic evaluation. Ruby is easy to learn. Everyday tasks are simple to code, and once you've done them, they are easy to maintain and grow. Apparently difficult things often turn out not to have been difficult after all. Ruby follows the Principle of Least Surprise---things work the way you would expect them to, with very few special cases or exceptions. And that really does make a difference when you're programming. We call Ruby a transparent language. By that we mean that Ruby doesn't obscure the solutions you write behind lots of syntax and the need to churn out reams of support code just to get simple things done. With Ruby you write programs close to the problem domain. Rather than constantly mapping your ideas and designs down to the pedestrian level of most languages, with Ruby you'll find you can express them directly and express them elegantly. This means you code faster. It also means your programs stay readable and maintainable. Using Ruby, we are constantly amazed at how much code we can write in one sitting, code that works the first time. There are very few syntax errors, no type violations, and far fewer bugs than usual. This makes sense: there's less to get wrong. No bothersome semicolons to type mechanically at the end of each line. No troublesome type declarations to keep in sync (especially in separate files). No unnecessary words just to keep the compiler happy. No error-prone framework code. So why learn Ruby? Because we think it will help you program better. It will help you to focus on the problem at hand, with fewer distractions. It will make your life easier.", author_id: user1.id, notebook_id: notebook1.id)

note5 = Note.create!(title: "JavaScript", body: "<p><strong class='ql-size-large'>What is JavaScript?</strong></p><h2><br></h2><p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p><p><br></p><p>JavaScript contains a standard library of objects, such as&nbsp;<code>Array</code>,&nbsp;<code>Date</code>, and&nbsp;<code>Math</code>, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p><p><br></p><ul><li><em>Client-side JavaScript</em>&nbsp;extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li></ul><p><br></p><ul><li><em>Server-side JavaScript</em>&nbsp;extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li></ul>", plain_text_body: "What is JavaScript? JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them. JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example: Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation. Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.", author_id: user1.id, notebook_id: notebook1.id)

note6 = Note.create!(title: "JavaScript Inheritance", body: "<h3><strong class='ql-size-large' style='color: rgb(153, 51, 255);'>Inheriting properties</strong></h3><p><br></p><p>JavaScript objects are dynamic 'bags' of properties (referred to as&nbsp;<strong>own properties</strong>). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.</p><p><br></p><p>Here is what happens when trying to access a property:</p><p><br></p><pre class='ql-syntax' spellcheck='false'>// Let's assume we have object o, with its own properties a and b:
// {a: 1, b: 2}
// o.[[Prototype]] has properties b and c:
// {b: 3, c: 4}
// Finally, o.[[Prototype]].[[Prototype]] is null.
// This is the end of the prototype chain, as null,
// by definition, has no [[Prototype]].
// Thus, the full prototype chain looks like:
// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; null

console.log(o.a); // 1
// Is there an 'a' own property on o? Yes, and its value is 1.

console.log(o.b); // 2
// Is there a 'b' own property on o? Yes, and its value is 2.
// The prototype also has a 'b' property, but it's not visited.
// This is called 'property shadowing.'

console.log(o.c); // 4
// Is there a 'c' own property on o? No, check its prototype.
// Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4.

console.log(o.d); // undefined
// Is there a 'd' own property on o? No, check its prototype.
// Is there a 'd' own property on o.[[Prototype]]? No, check its prototype.
// o.[[Prototype]].[[Prototype]] is null, stop searching,
// no property found, return undefined.
</pre><p><br></p><p>Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a&nbsp;getter or a setter.</p><p><br></p>", plain_text_body: "Inheriting properties JavaScript objects are dynamic 'bags' of properties (referred to as own properties). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached. Here is what happens when trying to access a property: // Let's assume we have object o, with its own properties a and b: // {a: 1, b: 2} // o.[[Prototype]] has properties b and c: // {b: 3, c: 4} // Finally, o.[[Prototype]].[[Prototype]] is null. // This is the end of the prototype chain, as null, // by definition, has no [[Prototype]]. // Thus, the full prototype chain looks like: // {a: 1, b: 2} ---> {b: 3, c: 4} ---> null console.log(o.a); // 1 // Is there an 'a' own property on o? Yes, and its value is 1. console.log(o.b); // 2 // Is there a 'b' own property on o? Yes, and its value is 2. // The prototype also has a 'b' property, but it's not visited. // This is called 'property shadowing.' console.log(o.c); // 4 // Is there a 'c' own property on o? No, check its prototype. // Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4. console.log(o.d); // undefined // Is there a 'd' own property on o? No, check its prototype. // Is there a 'd' own property on o.[[Prototype]]? No, check its prototype. // o.[[Prototype]].[[Prototype]] is null, stop searching, // no property found, return undefined. Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a getter or a setter.", author_id: user1.id, notebook_id: notebook1.id)

note7 = Note.create!(title: "MySQL", body: "<h3><strong class='ql-size-large' style='color: rgb(0, 102, 204);'>The Main Features of MySQL</strong></h3><p><br></p><h4><strong>Internals and Portability</strong></h4><p><br></p><ul><li>Written in C and C++.</li><li>Tested with a broad range of different compilers.</li><li>Works on many different platforms. See&nbsp;http://www.mysql.com/support/supportedplatforms/database.html.</li><li>For portability, uses&nbsp;<strong>CMake</strong>&nbsp;in MySQL 5.5 and up. Previous series use GNU Automake, Autoconf, and Libtool.</li><li>Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (<a href='http://developer.kde.org/~sewardj/' target='_blank' style='color: rgb(0, 116, 163);'>http://developer.kde.org/~sewardj/</a>).</li><li>Uses multi-layered server design with independent modules.</li><li>Designed to be fully multi-threaded using kernel threads, to easily use multiple CPUs if they are available.</li><li>Provides transactional and nontransactional storage engines.</li><li>Uses very fast B-tree disk tables (MyISAM) with index compression.</li><li>Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database.</li><li>Uses a very fast thread-based memory allocation system.</li><li>Executes very fast joins using an optimized nested-loop join.</li><li>Implements in-memory hash tables, which are used as temporary tables.</li><li>Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization.</li><li>Provides the server as a separate program for use in a client/server networked environment, and as a library that can be embedded (linked) into standalone applications. Such applications can be used in isolation or in environments where no network is available.</li></ul><p><br></p><h4><strong>Data Types</strong></h4><p><br></p><ul><li>Many data types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long,&nbsp;FLOAT,&nbsp;DOUBLE,&nbsp;CHAR,&nbsp;VARCHAR,&nbsp;BINARY,&nbsp;VARBINARY,&nbsp;TEXT,&nbsp;BLOB,&nbsp;DATE,&nbsp;TIME,&nbsp;DATETIME, TIMESTAMP,&nbsp;YEAR,&nbsp;SET,&nbsp;ENUM, and OpenGIS spatial types. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/data-types.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;11,&nbsp;<em>Data Types</em></a>.</li><li>Fixed-length and variable-length string types.</li></ul><p><br></p><h4><strong>Statements and Functions</strong></h4><ul><li>Full operator and function support in the&nbsp;SELECT&nbsp;list and&nbsp;WHERE&nbsp;clause of queries. For example:</li></ul><p><br></p><pre class='ql-syntax' spellcheck='false'>mysql&gt; SELECT CONCAT(first_name, ' ', last_name)
    -&gt; FROM citizen
    -&gt; WHERE income/dependents &gt; 10000 AND age &gt; 30;

</pre><p><br></p><ul><li>Full support for SQL&nbsp;GROUP BY&nbsp;and&nbsp;ORDER BY&nbsp;clauses. Support for group functions (COUNT(),&nbsp;AVG(),&nbsp;STD(),&nbsp;SUM(),&nbsp;MAX(),&nbsp;MIN(), and&nbsp;GROUP_CONCAT()).</li><li>Support for&nbsp;LEFT OUTER JOIN&nbsp;and&nbsp;RIGHT OUTER JOIN&nbsp;with both standard SQL and ODBC syntax.</li><li>Support for aliases on tables and columns as required by standard SQL.</li><li>Support for&nbsp;DELETE,&nbsp;INSERT,&nbsp;REPLACE, and&nbsp;UPDATE&nbsp;to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server.</li><li>Support for MySQL-specific&nbsp;SHOW&nbsp;statements that retrieve information about databases, storage engines, tables, and indexes. Support for the&nbsp;INFORMATION_SCHEMAdatabase, implemented according to standard SQL.</li><li>An&nbsp;EXPLAIN&nbsp;statement to show how the optimizer resolves a query.</li><li>Independence of function names from table or column names. For example,&nbsp;ABS&nbsp;is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the&nbsp;'<code style='color: black;'>(</code>'&nbsp;that follows it. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/keywords.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;9.3, 'Keywords and Reserved Words'</a>.</li><li>You can refer to tables from different databases in the same statement.</li></ul><p><br></p><h4><strong>Security</strong></h4><p><br></p><ul><li>A privilege and password system that is very flexible and secure, and that enables host-based verification.</li><li>Password security by encryption of all password traffic when you connect to a server.</li></ul><p><br></p><h4><strong>Scalability and Limits</strong></h4><p><br></p><ul><li>Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows.</li><li>Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for&nbsp;InnoDB&nbsp;tables is either 767 bytes or 3072 bytes. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/innodb-restrictions.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;14.8.1.7, 'Limits on InnoDB Tables'</a>. The maximum index width for&nbsp;MyISAM&nbsp;tables is 1000 bytes. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;15.2, 'The MyISAM Storage Engine'</a>. An index may use a prefix of a column for&nbsp;CHAR,&nbsp;VARCHAR,&nbsp;BLOB, or&nbsp;TEXT&nbsp;column types.</li></ul><p><br></p><h4><strong>Connectivity</strong></h4><p><br></p><ul><li>Clients can connect to MySQL Server using several protocols:</li><li>Clients can connect using TCP/IP sockets on any platform.</li><li>On Windows systems, clients can connect using named pipes if the server is started with the&nbsp;--enable-named-pipe&nbsp;option. Windows servers also support shared-memory connections if started with the&nbsp;--shared-memory&nbsp;option. Clients can connect through shared memory by using the&nbsp;--protocol=memory&nbsp;option.</li><li>On Unix systems, clients can connect using Unix domain socket files.</li><li>MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings.</li><li>APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/connectors-apis.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;27,&nbsp;<em>Connectors and APIs</em></a>.</li><li>The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See&nbsp;<a href='https://dev.mysql.com/doc/connector-odbc/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/ODBC Developer Guide</a>.</li><li>The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See&nbsp;<a href='https://dev.mysql.com/doc/connector-j/5.1/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/J 5.1 Developer Guide</a>.</li><li>MySQL Connector/Net enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/Net is a fully managed ADO.NET driver written in 100% pure C#. See&nbsp;<a href='https://dev.mysql.com/doc/connector-net/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/Net Developer Guide</a>.</li></ul><p><br></p><h4><strong>Localization</strong></h4><p><br></p><ul><li>The server can provide error messages to clients in many languages. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/error-message-language.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.2, 'Setting the Error Message Language'</a>.</li><li>Full support for several different character sets, including&nbsp;latin1&nbsp;(cp1252),&nbsp;german,&nbsp;big5,&nbsp;ujis, several Unicode character sets, and more. For example, the Scandinavian characters&nbsp;'å',&nbsp;'ä'&nbsp;and&nbsp;'ö'&nbsp;are permitted in table and column names.</li><li>All data is saved in the chosen character set.</li><li>Sorting and comparisons are done according to the default character set and collation. is possible to change this when the MySQL server is started (see <a href='https://dev.mysql.com/doc/refman/5.7/en/charset-server.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.1.3.2, 'Server Character Set and Collation'</a>). To see an example of very advanced sorting, look at the Czech sorting code. MySQL Server supports many different character sets that can be specified at compile time and runtime.</li><li>The server time zone can be changed dynamically, and individual clients can specify their own time zone. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.6, 'MySQL Server Time Zone Support'</a>.</li></ul><p><br></p><h4><strong>Clients and Tools</strong></h4><p><br></p><ul><li>MySQL includes several client and utility programs. These include both command-line programs such as&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqldump</strong></a>&nbsp;and&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/mysqladmin.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqladmin</strong></a>, and graphical programs such as&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/workbench.html' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Workbench</a>.</li><li>MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the <a href='https://dev.mysql.com/doc/refman/5.7/en/mysqlcheck.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqlcheck</strong></a>&nbsp;client. MySQL also includes&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/myisamchk.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>myisamchk</strong></a>, a very fast command-line utility for performing these operations on&nbsp;MyISAM&nbsp;tables. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/programs.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;4,&nbsp;<em>MySQL Programs</em></a>.</li><li>MySQL programs can be invoked with the&nbsp;--help&nbsp;or&nbsp;-?&nbsp;option to obtain online assistance.</li></ul><p><br></p>", plain_text_body: "The Main Features of MySQL Internals and Portability Written in C and C++. Tested with a broad range of different compilers. Works on many different platforms. See http://www.mysql.com/support/supportedplatforms/database.html. For portability, uses CMake in MySQL 5.5 and up. Previous series use GNU Automake, Autoconf, and Libtool. Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (http://developer.kde.org/~sewardj/). Uses multi-layered server design with independent modules. Designed to be fully multi-threaded using kernel threads, to easily use multiple CPUs if they are available.
Provides transactional and nontransactional storage engines.
Uses very fast B-tree disk tables (MyISAM) with index compression.
Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database. Uses a very fast thread-based memory allocation system.
Executes very fast joins using an optimized nested-loop join.
Implements in-memory hash tables, which are used as temporary tables.
Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization. Provides the server as a separate program for use in a client/server networked environment, and as a library that can be embedded (linked) into standalone applications. Such applications can be used in isolation or in environments where no network is available. Data Types Many data types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long, FLOAT, DOUBLE, CHAR, VARCHAR, BINARY, VARBINARY, TEXT, BLOB, DATE, TIME, DATETIME, TIMESTAMP, YEAR, SET, ENUM, and OpenGIS spatial types. See Chapter 11, Data Types.
Fixed-length and variable-length string types. Statements and Functions
Full operator and function support in the SELECT list and WHERE clause of queries. For example: mysql> SELECT CONCAT(first_name, ' ', last_name) -> FROM citizen -> WHERE income/dependents > 10000 AND age > 30; Full support for SQL GROUP BY and ORDER BY clauses. Support for group functions (COUNT(), AVG(), STD(), SUM(), MAX(), MIN(), and GROUP_CONCAT()). Support for LEFT OUTER JOIN and RIGHT OUTER JOIN with both standard SQL and ODBC syntax. Support for aliases on tables and columns as required by standard SQL. Support for DELETE, INSERT, REPLACE, and UPDATE to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server. Support for MySQL-specific SHOW statements that retrieve information about databases, storage engines, tables, and indexes. Support for the INFORMATION_SCHEMAdatabase, implemented according to standard SQL. An EXPLAIN statement to show how the optimizer resolves a query. Independence of function names from table or column names. For example, ABS is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the '(' that follows it. See Section 9.3, 'Keywords and Reserved Words'. You can refer to tables from different databases in the same statement. Security A privilege and password system that is very flexible and secure, and that enables host-based verification. Password security by encryption of all password traffic when you connect to a server. Scalability and Limits Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows. Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for InnoDB tables is either 767 bytes or 3072 bytes. See Section 14.8.1.7, 'Limits on InnoDB Tables'. The maximum index width for MyISAM tables is 1000 bytes. See Section 15.2, 'The MyISAM Storage Engine'. An index may use a prefix of a column for CHAR, VARCHAR, BLOB, or TEXT column types. Connectivity Clients can connect to MySQL Server using several protocols: Clients can connect using TCP/IP sockets on any platform. On Windows systems, clients can connect using named pipes if the server is started with the --enable-named-pipe option. Windows servers also support shared-memory connections if started with the --shared-memory option. Clients can connect through shared memory by using the --protocol=memory option. On Unix systems, clients can connect using Unix domain socket files. MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings. APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See Chapter 27, Connectors and APIs. The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See MySQL Connector/ODBC Developer Guide. The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See MySQL Connector/J 5.1 Developer Guide. MySQL Connector/Net enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/Net is a fully managed ADO.NET driver written in 100% pure C#. See MySQL Connector/Net Developer Guide. Localization The server can provide error messages to clients in many languages. See Section 10.2, 'Setting the Error Message Language'. Full support for several different character sets, including latin1 (cp1252), german, big5, ujis, several Unicode character sets, and more. For example, the Scandinavian characters 'å', 'ä' and 'ö' are permitted in table and column names. All data is saved in the chosen character set. Sorting and comparisons are done according to the default character set and collation. is possible to change this when the MySQL server is started (see Section 10.1.3.2, 'Server Character Set and Collation'). To see an example of very advanced sorting, look at the Czech sorting code. MySQL Server supports many different character sets that can be specified at compile time and runtime. The server time zone can be changed dynamically, and individual clients can specify their own time zone. See Section 10.6, 'MySQL Server Time Zone Support'. Clients and Tools MySQL includes several client and utility programs. These include both command-line programs such as mysqldump and mysqladmin, and graphical programs such as MySQL Workbench. MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the mysqlcheck client. MySQL also includes myisamchk, a very fast command-line utility for performing these operations on MyISAM tables. See Chapter 4, MySQL Programs. MySQL programs can be invoked with the --help or -? option to obtain online assistance.", author_id: user1.id, notebook_id: notebook1.id)

note8 = Note.create!(title: "What is MySQL?", body: "<ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL is a database management system.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network. To add, access, and process data stored in a computer database, you need a database management system such as MySQL Server. Since computers are very good at handling large amounts of data, database management systems play a central role in computing, as standalone utilities, or as parts of other applications.</span></p><p><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL databases are relational.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>A relational database stores data in separate tables rather than putting all the data in one big storeroom. The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views, rows, and columns, offers a flexible programming environment. You set up rules governing the relationships between different data fields, such as one-to-one, one-to-many, unique, required or optional, and&nbsp;'pointers'&nbsp;between different tables. The database enforces these rules, so that with a well-designed database, your application never sees inconsistent, duplicate, orphan, out-of-date, or missing data.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>The SQL part of&nbsp;'MySQL'&nbsp;stands for&nbsp;'Structured Query Language'. SQL is the most common standardized language used to access databases. Depending on your programming environment, you might enter SQL directly (for example, to generate reports), embed SQL statements into code written in another language, or use a language-specific API that hides the SQL syntax.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>SQL is defined by the ANSI/ISO SQL Standard. The SQL standard has been evolving since 1986 and several versions exist. In this manual,&nbsp;'SQL-92'&nbsp;refers to the standard released in 1992,&nbsp;'SQL:1999'&nbsp;refers to the standard released in 1999, and&nbsp;'SQL:2003'&nbsp;refers to the current version of the standard. We use the phrase&nbsp;'the SQL standard'&nbsp;to mean the current version of the SQL Standard at any time.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL software is Open Source.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the Internet and use it without paying anything. If you wish, you may study the source code and change it to suit your needs. The MySQL software uses the GPL (GNU General Public License),&nbsp;</span><a href='http://www.fsf.org/licenses/' target='_blank' class='ql-size-large' style='color: rgb(0, 116, 163);'>http://www.fsf.org/licenses/</a><span class='ql-size-large'>, to define what you may and may not do with the software in different situations. If you feel uncomfortable with the GPL or need to embed MySQL code into a commercial application, you can buy a commercially licensed version from us. See the MySQL Licensing Overview for more information (</span><a href='http://www.mysql.com/company/legal/licensing/' target='_blank' class='ql-size-large' style='color: rgb(0, 116, 163);'>http://www.mysql.com/company/legal/licensing/</a><span class='ql-size-large'>).</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>The MySQL Database Server is very fast, reliable, scalable, and easy to use.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>If that is what you are looking for, you should give it a try. MySQL Server can run comfortably on a desktop or laptop, alongside your other applications, web servers, and so on, requiring little or no attention. If you dedicate an entire machine to MySQL, you can adjust the settings to take advantage of all the memory, CPU power, and I/O capacity available. MySQL can also scale up to clusters of machines, networked together.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>MySQL Server was originally developed to handle large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years. Although under constant development, MySQL Server today offers a rich and useful set of functions. Its connectivity, speed, and security make MySQL Server highly suited for accessing databases on the Internet.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL Server works in client/server or embedded systems.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>The MySQL Database Software is a client/server system that consists of a multi-threaded SQL server that supports different back ends, several different client programs and libraries, administrative tools, and a wide range of application programming interfaces (APIs).</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>We also provide MySQL Server as an embedded multi-threaded library that you can link into your application to get a smaller, faster, easier-to-manage standalone product.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>A large amount of contributed MySQL software is available.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>MySQL Server has a practical set of features developed in close cooperation with our users. It is very likely that your favorite application or language supports the MySQL Database Server.</span></p><p class='ql-indent-1'><br></p><p><span class='ql-size-large'>The official way to pronounce&nbsp;'MySQL'&nbsp;is&nbsp;'My Ess Que Ell'&nbsp;(not&nbsp;'my sequel'), but we do not mind if you pronounce it as&nbsp;'my sequel'&nbsp;or in some other localized way.</span></p>", plain_text_body: "MySQL is a database management system. A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network. To add, access, and process data stored in a computer database, you need a database management system such as MySQL Server. Since computers are very good at handling large amounts of data, database management systems play a central role in computing, as standalone utilities, or as parts of other applications. MySQL databases are relational. A relational database stores data in separate tables rather than putting all the data in one big storeroom. The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views, rows, and columns, offers a flexible programming environment. You set up rules governing the relationships between different data fields, such as one-to-one, one-to-many, unique, required or optional, and 'pointers' between different tables. The database enforces these rules, so that with a well-designed database, your application never sees inconsistent, duplicate, orphan, out-of-date, or missing data. The SQL part of 'MySQL' stands for 'Structured Query Language'. SQL is the most common standardized language used to access databases. Depending on your programming environment, you might enter SQL directly (for example, to generate reports), embed SQL statements into code written in another language, or use a language-specific API that hides the SQL syntax. SQL is defined by the ANSI/ISO SQL Standard. The SQL standard has been evolving since 1986 and several versions exist. In this manual, 'SQL-92' refers to the standard released in 1992, 'SQL:1999' refers to the standard released in 1999, and 'SQL:2003' refers to the current version of the standard. We use the phrase 'the SQL standard' to mean the current version of the SQL Standard at any time. MySQL software is Open Source. Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the Internet and use it without paying anything. If you wish, you may study the source code and change it to suit your needs. The MySQL software uses the GPL (GNU General Public License), http://www.fsf.org/licenses/, to define what you may and may not do with the software in different situations. If you feel uncomfortable with the GPL or need to embed MySQL code into a commercial application, you can buy a commercially licensed version from us. See the MySQL Licensing Overview for more information (http://www.mysql.com/company/legal/licensing/). The MySQL Database Server is very fast, reliable, scalable, and easy to use. If that is what you are looking for, you should give it a try. MySQL Server can run comfortably on a desktop or laptop, alongside your other applications, web servers, and so on, requiring little or no attention. If you dedicate an entire machine to MySQL, you can adjust the settings to take advantage of all the memory, CPU power, and I/O capacity available. MySQL can also scale up to clusters of machines, networked together. MySQL Server was originally developed to handle large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years. Although under constant development, MySQL Server today offers a rich and useful set of functions. Its connectivity, speed, and security make MySQL Server highly suited for accessing databases on the Internet. MySQL Server works in client/server or embedded systems. The MySQL Database Software is a client/server system that consists of a multi-threaded SQL server that supports different back ends, several different client programs and libraries, administrative tools, and a wide range of application programming interfaces (APIs). We also provide MySQL Server as an embedded multi-threaded library that you can link into your application to get a smaller, faster, easier-to-manage standalone product. A large amount of contributed MySQL software is available. MySQL Server has a practical set of features developed in close cooperation with our users. It is very likely that your favorite application or language supports the MySQL Database Server. The official way to pronounce 'MySQL' is 'My Ess Que Ell' (not 'my sequel'), but we do not mind if you pronounce it as 'my sequel' or in some other localized way.", author_id: user1.id, notebook_id: notebook1.id)

note9 = Note.create!(title: "ActiveRecord", body: "<h3><strong>What is Active Record?</strong></h3><p><br></p><p>Active Record is the M in&nbsp;<a href='http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller' target='_blank' style='color: rgb(152, 9, 5);'>MVC</a>&nbsp;- the model - which is the layer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database. It is an implementation of the Active Record pattern which itself is a description of an Object Relational Mapping system.</p><p><br></p><h4><strong>The Active Record Pattern</strong></h4><p><br></p><p><a href='http://www.martinfowler.com/eaaCatalog/activeRecord.html' target='_blank' style='color: rgb(152, 9, 5);'>Active Record was described by Martin Fowler</a>&nbsp;in his book&nbsp;<em>Patterns of Enterprise Application Architecture</em>. In Active Record, objects carry both persistent data and behavior which operates on that data. Active Record takes the opinion that ensuring data access logic as part of the object will educate users of that object on how to write to and read from the database.</p><p><br></p><h4><strong>Object Relational Mapping</strong></h4><p><br></p><p>Object Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code.</p><p><br></p><h4><strong>Active Record as an ORM Framework</strong></h4><p><br></p><p>Active Record gives us several mechanisms, the most important being the ability to:</p><ul><li>Represent models and their data.</li><li>Represent associations between these models.</li><li>Represent inheritance hierarchies through related models.</li><li>Validate models before they get persisted to the database.</li><li>Perform database operations in an object-oriented fashion.</li></ul><p><br></p>", plain_text_body: "What is Active Record? Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database. It is an implementation of the Active Record pattern which itself is a description of an Object Relational Mapping system. The Active Record Pattern Active Record was described by Martin Fowler in his book Patterns of Enterprise Application Architecture. In Active Record, objects carry both persistent data and behavior which operates on that data. Active Record takes the opinion that ensuring data access logic as part of the object will educate users of that object on how to write to and read from the database. Object Relational Mapping Object Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code. Active Record as an ORM Framework Active Record gives us several mechanisms, the most important being the ability to: Represent models and their data. Represent associations between these models. Represent inheritance hierarchies through related models. Validate models before they get persisted to the database. Perform database operations in an object-oriented fashion.
", author_id: user1.id, notebook_id: notebook1.id)

note10 = Note.create!(title: "Capybara", body: "<p><span style='background-color: rgb(255, 255, 255); color: rgb(36, 41, 46);'>Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem.</span></p><p><br></p><p><span class='ql-size-large'>Key benefits</span></p><p><br></p><ul><li>No setup&nbsp;necessary for Rails and Rack application. Works out of the box.</li></ul><p><br></p><ul><li>Intuitive API&nbsp;which mimics the language an actual user would use.</li></ul><p><br></p><ul><li>Switch the backend&nbsp;your tests run against from fast headless mode to an actual browser with no changes to your tests.</li></ul><p><br></p><ul><li>Powerful synchronization&nbsp;features mean you never have to manually wait for asynchronous processes to complete.</li></ul><p><br></p>", plain_text_body: "Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem. Key benefits No setup necessary for Rails and Rack application. Works out of the box. Intuitive API which mimics the language an actual user would use. Switch the backend your tests run against from fast headless mode to an actual browser with no changes to your tests. Powerful synchronization features mean you never have to manually wait for asynchronous processes to complete.", author_id: user1.id, notebook_id: notebook1.id)

note11 = Note.create!(title: "The EveryGirl", body: "<ol><li><strong>2 proteins:</strong>&nbsp;Select&nbsp;one cooked or prepared protein and a raw protein. Pre-marinated or prepared meats, such as a&nbsp;rotisserie chicken,&nbsp;help&nbsp;reduce&nbsp;cooking time while bringing home a few fillets of fresh fish challenges you to be creative.</li><li><strong>2 veggies:</strong> Choose seasonal, fresh produce that can be easily roasted or steamed to serve as a side.</li><li><strong>2 fruits:</strong> We often purchase too many fruits, and then they spoil.&nbsp;Pick just two that you’d want to eat with yogurt or to grab for&nbsp;on-the-go mornings.</li><li><strong>Herb-du-jour:</strong>&nbsp;All you need is a handful of herbs to add a dab of freshness&nbsp;to your morning eggs or to spruce up your choice of protein.&nbsp;</li><li><strong>A dozen eggs:</strong>&nbsp;Eggs (preferably the pretty brown ones!)&nbsp;are a weekly essential that can be used any meal or snack throughout&nbsp;the day.&nbsp;</li><li><strong>Greek yogurt:</strong>&nbsp;Aside from being a quick and healthy breakfast choice, we like to use Greek yogurt in creative ways–in place of&nbsp;mayonnaise in chicken salads and instead of sour cream for tacos.</li><li><strong>Choice of cheese:</strong>&nbsp;Always a fun part of shopping! Pick one cheese that you can add to omelets, mix&nbsp;into a salad, or eat on its own.</li><li><strong>Choice of grain:&nbsp;</strong>Unless you’re on a carb-free diet, we think it’s always a good idea to experiment with grains, such as Basmati rice or quinoa, to round off a meal and make you feel full.</li><li><strong>Granola:&nbsp;</strong>Whether&nbsp;homemade&nbsp;or storebought, we love topping our morning yogurt or vanilla ice cream with a little crunch.</li><li><strong>Smart snack:</strong>&nbsp;Nuts and dried fruit&nbsp;are always a great choice, but we never rule out dark chocolate or popcorn!</li></ol>", plain_text_body: "2 proteins: Select one cooked or prepared protein and a raw protein. Pre-marinated or prepared meats, such as a rotisserie chicken, help reduce cooking time while bringing home a few fillets of fresh fish challenges you to be creative. 2 veggies: Choose seasonal, fresh produce that can be easily roasted or steamed to serve as a side. 2 fruits: We often purchase too many fruits, and then they spoil. Pick just two that you’d want to eat with yogurt or to grab for on-the-go mornings. Herb-du-jour: All you need is a handful of herbs to add a dab of freshness to your morning eggs or to spruce up your choice of protein.  A dozen eggs: Eggs (preferably the pretty brown ones!) are a weekly essential that can be used any meal or snack throughout the day. Greek yogurt: Aside from being a quick and healthy breakfast choice, we like to use Greek yogurt in creative ways–in place of mayonnaise in chicken salads and instead of sour cream for tacos. Choice of cheese: Always a fun part of shopping! Pick one cheese that you can add to omelets, mix into a salad, or eat on its own. Choice of grain: Unless you’re on a carb-free diet, we think it’s always a good idea to experiment with grains, such as Basmati rice or quinoa, to round off a meal and make you feel full. Granola: Whether homemade or storebought, we love topping our morning yogurt or vanilla ice cream with a little crunch. Smart snack: Nuts and dried fruit are always a great choice, but we never rule out dark chocolate or popcorn!", author_id: user1.id, notebook_id: notebook2.id)

note12 = Note.create!(title: "Healthy Grocery List", body:"<p><strong class='ql-size-large'>1. Bakery and Bread</strong></p><p><br></p><p>On Your List:</p><ul><li>Whole wheat bread, pita pockets, and English muffins</li><li>Whole-grain flour tortillas</li></ul><p><br></p><p><strong class='ql-size-large'>2. Meat and Seafood</strong></p><p><br></p><p>On Your List:</p><ul><li>Skinless chicken or turkey&nbsp;breasts</li><li>Ground turkey or chicken</li><li>Salmon, halibut, trout, mackerel, or your favorite seafood</li><li>Reduced-sodium lunchmeat (turkey, roast beef)</li></ul><p><br></p><p><strong class='ql-size-large'>3. Pasta and Rice</strong></p><p><br></p><p>On Your List:</p><ul><li>Brown rice</li><li>Whole wheat or whole-grain pasta</li></ul><p>Again, favor whole grains whenever possible.</p><p><br></p><p><strong class='ql-size-large'>4. Oils, Sauces, Salad Dressings, and Condiments</strong></p><p><br></p><p>On Your List:</p><ul><li>Tomato sauce</li><li>Mustard</li><li>Barbecue sauce</li><li>Red-wine vinegar</li><li>Salsa</li><li>Extra virgin olive oil, canola oil, nonfat cooking spray</li><li>Jarred capers and olives</li><li>Hot pepper sauce</li></ul><p><br></p><p><strong class='ql-size-large'>5. Cereals and Breakfast Foods</strong></p><p><br></p><p>On Your List:</p><ul><li>Whole-grain or multigrain cereals</li><li>Steel-cut or instant oatmeal</li><li>Whole-grain cereal bars</li></ul><p><br></p><p><strong class='ql-size-large'>6. Soups and Canned Goods</strong></p><p><br></p><p>On Your List:</p><ul><li>Diced or whole peeled tomatoes</li><li>Tuna or salmon packed in water</li><li>Low-sodium soups and broths</li><li>Black,&nbsp;kidney, soy, or garbanzo beans; lentils, split peas</li><li>Diced green chilies</li></ul><p><br></p><p><strong class='ql-size-large'>7. Frozen Foods</strong></p><p><br></p><p>On Your List:</p><ul><li>Frozen vegetables: broccoli, spinach, peas, and carrots (no sauce)</li><li>Frozen fruit: strawberries, raspberries, blueberries (without added sugar)</li><li>Frozen shrimp</li><li>Pre-portioned, low-fat ice cream or frozen yogurt</li><li>Whole-grain waffles</li><li>Whole-grain vegetable pizza</li></ul><p><br></p><p><strong class='ql-size-large'>8. Dairy, Cheese, and Eggs</strong></p><p><br></p><p>On Your List:</p><ul><li>Skim or low-fat milk or soymilk</li><li>Fat-free or low-fat yogurt</li><li>Fat-free or low-fat cottage cheese</li><li>Low-fat cheese or string cheese snacks</li><li>Eggs or egg substitutes</li><li>Firm tofu</li><li>Butter or spread (a variety that doesn't contain hydrogenated oils)</li></ul>", plain_text_body: "1. Bakery and Bread On Your List: Whole wheat bread, pita pockets, and English muffins Whole-grain flour tortillas 2. Meat and Seafood On Your List: Skinless chicken or turkey breasts Ground turkey or chicken Salmon, halibut, trout, mackerel, or your favorite seafood Reduced-sodium lunchmeat (turkey, roast beef) 3. Pasta and Rice On Your List: Brown rice Whole wheat or whole-grain pasta Again, favor whole grains whenever possible. 4. Oils, Sauces, Salad Dressings, and Condiments On Your List: Tomato sauce Mustard Barbecue sauce Red-wine vinegar Salsa Extra virgin olive oil, canola oil, nonfat cooking spray Jarred capers and olives Hot pepper sauce 5. Cereals and Breakfast Foods On Your List: Whole-grain or multigrain cereals Steel-cut or instant oatmeal Whole-grain cereal bars 6. Soups and Canned Goods On Your List: Diced or whole peeled tomatoes Tuna or salmon packed in water Low-sodium soups and broths Black, kidney, soy, or garbanzo beans; lentils, split peas Diced green chilies 7. Frozen Foods On Your List: Frozen vegetables: broccoli, spinach, peas, and carrots (no sauce) Frozen fruit: strawberries, raspberries, blueberries (without added sugar) Frozen shrimp Pre-portioned, low-fat ice cream or frozen yogurt Whole-grain waffles Whole-grain vegetable pizza 8. Dairy, Cheese, and Eggs On Your List: Skim or low-fat milk or soymilk Fat-free or low-fat yogurt Fat-free or low-fat cottage cheese Low-fat cheese or string cheese snacks Eggs or egg substitutes Firm tofu Butter or spread (a variety that doesn't contain hydrogenated oils)", author_id: user1.id, notebook_id: notebook2.id)

note13 = Note.create!(title: "For New Kitchen", body: "<p><strong><u>Pantry</u></strong></p><ul><li>Rice</li><li>Dried pasta and noodles</li><li>Beans (dried or canned)</li><li><s>Lentils</s></li><li>Whole grains</li><li>Canned tomatoes</li><li>Canned tuna</li><li>Canned coconut milk</li><li>Canned soup</li><li>Chicken broth</li><li><s>Bread</s></li><li><s>Peanut butter</s></li><li>Whole oats</li><li>Cereal</li><li>Snacks (nuts, dried fruit, crackers, pretzels)</li><li><s>Cooking oil (olive oil, canola oil, coconut oil, sesame oil)</s></li><li>Vinegar (white, balsamic, apple cider, white wine)</li><li>Soy sauce or tamari</li><li>Honey</li><li>Maple syrup</li><li>All-purpose flour</li><li>Sugar</li><li>Coffee and tea</li></ul><p><br></p><p><strong><u>Refrigerator</u></strong></p><ul><li><s>Milk</s></li><li>Cream</li><li>Juice</li><li>Eggs</li><li>Butter</li><li>Yogurt</li><li>Cheese</li><li><s>Fresh fruit</s></li><li><s>Fresh vegetables</s></li><li>Tofu</li><li>Tortillas</li></ul><p><br></p><p><strong><u>Freezer</u></strong></p><ul><li>Frozen vegetables</li><li>Frozen fruit</li><li>Meat and poultry</li><li>Ice cream</li></ul><p><br></p><p><strong><u>Spices and Condiments</u></strong></p><ul><li>Salt</li><li>Black pepper</li><li>Basic spices (garlic powder, chili powder, paprika, cumin, cinnamon, nutmeg)</li><li>Ketchup</li><li>Mayonnaise</li><li>Mustard</li><li>Barbecue sauce</li><li>Hot sauce</li><li>Jam or preserves</li></ul>", plain_text_body: "Pantry Rice Dried pasta and noodles Beans (dried or canned) Lentils Whole grains Canned tomatoes Canned tuna Canned coconut milk Canned soup Chicken broth Bread Peanut butter Whole oats Cereal Snacks (nuts, dried fruit, crackers, pretzels) Cooking oil (olive oil, canola oil, coconut oil, sesame oil) Vinegar (white, balsamic, apple cider, white wine) Soy sauce or tamari Honey Maple syrup All-purpose flour Sugar Coffee and tea Refrigerator Milk Cream Juice Eggs Butter Yogurt Cheese Fresh fruit Fresh vegetables Tofu Tortillas Freezer Frozen vegetables Frozen fruit Meat and poultry Ice cream Spices and Condiments Salt Black pepper Basic spices (garlic powder, chili powder, paprika, cumin, cinnamon, nutmeg) Ketchup Mayonnaise Mustard Barbecue sauce Hot sauce Jam or preserves", author_id: user1.id, notebook_id: notebook2.id)

note14 = Note.create!(title: "Top 19", body: "<p><strong>1. Quinoa:&nbsp;</strong>This super seed is an easy, delicious&nbsp;complete protein&nbsp;that only takes 15 minutes to make. High in fiber and iron.</p><p><strong>Use for:</strong>&nbsp;Use it in place of rice or pasta and add to salads to make a complete meal. You can even throw some into your soups or wraps!</p><p><br></p><p><strong>2. Kale:&nbsp;</strong>Great source of... well, just about everything —&nbsp;especially vitamins A, C, K and calcium&nbsp;— even essential fatty acids and iron! No wonder they call it a superfood!</p><p><strong>Use for:</strong>&nbsp;Kale is ridiculously versatile. It can be dressed and massaged (yes, massaged.&nbsp;Click here to see a quick how-to video) with olive oil and kept in the fridge for a great salad base throughout the week. Its easy storage makes life so simple. You can also throw it into a soup, bake some crispy kale chips or add it as a side dish.</p><p><br></p><p><strong>3. Eggs:&nbsp;</strong>Get eggs that are organic and from pasture-raised chickens. We know eggs are an easy protein, but they’re also pretty much nature’s perfect food with too many benefits to mention including good amounts of fat-soluble vitamins A, D some B, fatty acids and tons of essential minerals like iodine! Eat the yolks, folks — that’s where&nbsp;most of the nutrients&nbsp;are!</p><p><strong>Use for:</strong>&nbsp;Breakfast, lunches, on top of any salad, scrambled eggs make a fun addition to soups and stir-frys. Sprinkle a bit of salt and pepper on a boiled egg for a quick, portable snack.</p><p><br></p><p><strong>4. Nuts:&nbsp;</strong>It’s important to buy&nbsp;raw, unsalted and unroasted to avoid added,&nbsp;unhealthy oilsand&nbsp;excess sodium. Nuts are full of healthy heart and&nbsp;brain-boosting fats and a good source of protein and tons of vitamins and minerals.</p><p><strong>Use for:&nbsp;</strong>Eat a handful for a quick snack, add to salads, even crush on top of soups and pastas gives a nice crunch. Mix it up and try all kinds. Don’t go overboard though, because they’re high in calories. I usually eat a handful or two a day.</p><p><br></p><p><strong>5. Nut butter:&nbsp;</strong>Organic, sugar-free. As above: great for&nbsp;healthy fats, proteins, vitamins and minerals.</p><p><strong>Use for:&nbsp;</strong>Spread on apples, celery, crackers or bananas, on healthy toast or add spoonful to smoothies.</p><p><br></p><p><strong>6. Seeds:&nbsp;</strong>Sesame, pumpkin, hemp hearts, ground flax, chia — unsalted. Seeds are tiny powerhouses of nutrition including healthy fats, proteins, fiber, calcium, and all sorts of other vitamins and minerals.</p><p><strong>Use for:</strong>&nbsp;Salad toppers, add to smoothies, add seeds to almost any dish for added awesome.</p><p><br></p><p><strong>7. Oats:</strong>&nbsp;Great for fiber and important minerals like manganese and a sustainable energy source to get you filled up and through the morning.</p><p><strong>Use for:&nbsp;</strong>Just pop oatmeal and water/milk on the stove and let it boil while you get dressed. Top with seeds, nuts, fruit, coconut flakes — whatever floats your boat. Great for baking too!</p><p><br></p><p><strong>8. Hummus:</strong>&nbsp;A delicious source of&nbsp;protein, fiber and minerals like iron and calcium!</p><p><strong>Use for:&nbsp;</strong>Hummus is great and easy snack on just about anything (veggies, crackers, baked chips, a condiment on sandwiches. Use it instead of sour cream. Yeah, I said that.</p><p><br></p><p><strong>9. Nut milk (i.e., almond/coconut):&nbsp;</strong>These readily available dairy alternatives are everywhere now and a great source of: proteins, healthy fats and lots of essential vitamins and minerals depending on which you choose. Good if you’re avoiding dairy products.</p><p><strong>Use for:</strong>&nbsp;I use this in my smoothies, in my oatmeal and in my lattes.</p><p><br></p><p><strong>10. Organic boxed broth:&nbsp;</strong>Sure, it’s better to have the homemade stuff hanging around in the freezer, but it’s motha-freakin time consuming! Sometime, you just need a box on hand to help start you off. I stick with organic.</p><p><strong>Use for:&nbsp;</strong>When you’re crunched for time, a little boxed broth is a simple base for homemade soups and other dishes. We do what we can, right?</p><p><br></p><p><strong>11. Garlic and onions:</strong>&nbsp;Both are great healing foods. They’re antioxidants, anti-viral,&nbsp;anti-fungal&nbsp;and loaded with vitamin C, among plenty of other vitamins.</p><p><strong>Use for:&nbsp;</strong>I use garlic and onions as a base for almost everything I cook. Just, chop, slice or dice and sauté with a bit of coconut or olive oil for a huge flavor. Yum.</p><p><br></p><p><strong>12. Chickpeas or legumes (canned or dried):&nbsp;</strong>Great for&nbsp;protein, fiber, B vitamins and lots of minerals like iron and magnesium.</p><p><strong>Use for:</strong>&nbsp;salad toppers, mix with veggies and quinoa, combined with grains, like brown rice, makes a complete protein, throw in soup, even make your own hummus!</p><p><br></p><p><strong>13. Frozen organic berries:&nbsp;</strong>Obviously, all sorts of micronutrients and anti-oxidants in these little packages of flavor!</p><p><strong>Use for:&nbsp;</strong>I add these to my morning smoothies, you can also do quick stovetop jam/sauce or use as a topping for cereal/yogurt/oatmeal.</p><p><br></p><p><strong>14. Apples:</strong>&nbsp;Great for their fiber and vitamin C among many other amazing health benefits.</p><p><strong>Use for:</strong>&nbsp;Portable and easy snacks, good with almond butter, great chopped in salads.</p><p><br></p><p><strong>15. Bananas:&nbsp;</strong>Great source of potassium, B6 and even vitamin C.</p><p><strong>Use for:</strong>&nbsp;A great way to get sweet without adding refined sugar. Add fresh or frozen to smoothies. Tip: chop in half and store a bunch in the freezer for easy use later. Bananas are also a great addition to oatmeal, chia pudding and wheat-free pancakes and of course you can make banana muffins!</p><p><br></p><p><strong>16. Lemons:&nbsp;</strong>Like all citrus, lemons deserve a major shout out for their vitamin C.</p><p><strong>Use for:&nbsp;</strong>Adding to water for a great detoxifying drink. Add to olive oil for instant homemade dressing, squeeze on top of veggies, fruits and fish for added flavor, use grated lemon rinds in baking or cooking.</p><p><br></p><p><strong>17. Coconut oil:&nbsp;</strong>Good quality is key: Look for&nbsp;virgin, organic and cold-pressed.</p><p>Coconut oil is an easily digestible, healthy saturated fat (MCT) and more stable for higher temp cooking. Don’t ever burn your oil!</p><p><strong>Use for:</strong>&nbsp;higher heat cooking, stir-frying, roasting veggies, frying eggs, good for baking plus you can actually use this for all sorts of&nbsp;skin and hair care! I use it as my daily&nbsp;body moisturizer! You won’t need anything else, I promise!</p><p><br></p><p><strong>18. Olive oil:&nbsp;</strong>Same as any oil, aim for: organic, extra virgin, cold-pressed.</p><p><strong>Use for:</strong>&nbsp;this is my go-to for easy-to-make salad dressing, also use for low-heat cooking.</p><p><br></p><p><strong>19. Vinegar:&nbsp;</strong>Balsamic, apple cider, red wine, white wine — pick one and start there!&nbsp;</p><p><strong>Use for:&nbsp;</strong>mix a little with olive oil to make healthy homemade dressings instead of buying&nbsp;overly-processed, store-bought salad dressing, also add a splash to many other recipes to enhance flavour.</p>", plain_text_body: "1. Quinoa: This super seed is an easy, delicious complete protein that only takes 15 minutes to make. High in fiber and iron. Use for: Use it in place of rice or pasta and add to salads to make a complete meal. You can even throw some into your soups or wraps! 2. Kale: Great source of... well, just about everything — especially vitamins A, C, K and calcium — even essential fatty acids and iron! No wonder they call it a superfood! Use for: Kale is ridiculously versatile. It can be dressed and massaged (yes, massaged. Click here to see a quick how-to video) with olive oil and kept in the fridge for a great salad base throughout the week. Its easy storage makes life so simple. You can also throw it into a soup, bake some crispy kale chips or add it as a side dish. 3. Eggs: Get eggs that are organic and from pasture-raised chickens. We know eggs are an easy protein, but they’re also pretty much nature’s perfect food with too many benefits to mention including good amounts of fat-soluble vitamins A, D some B, fatty acids and tons of essential minerals like iodine! Eat the yolks, folks — that’s where most of the nutrients are! Use for: Breakfast, lunches, on top of any salad, scrambled eggs make a fun addition to soups and stir-frys. Sprinkle a bit of salt and pepper on a boiled egg for a quick, portable snack. 4. Nuts: It’s important to buy raw, unsalted and unroasted to avoid added, unhealthy oilsand excess sodium. Nuts are full of healthy heart and brain-boosting fats and a good source of protein and tons of vitamins and minerals. Use for: Eat a handful for a quick snack, add to salads, even crush on top of soups and pastas gives a nice crunch. Mix it up and try all kinds. Don’t go overboard though, because they’re high in calories. I usually eat a handful or two a day. 5. Nut butter: Organic, sugar-free. As above: great for healthy fats, proteins, vitamins and minerals. Use for: Spread on apples, celery, crackers or bananas, on healthy toast or add spoonful to smoothies. 6. Seeds: Sesame, pumpkin, hemp hearts, ground flax, chia — unsalted. Seeds are tiny powerhouses of nutrition including healthy fats, proteins, fiber, calcium, and all sorts of other vitamins and minerals. Use for: Salad toppers, add to smoothies, add seeds to almost any dish for added awesome. 7. Oats: Great for fiber and important minerals like manganese and a sustainable energy source to get you filled up and through the morning. Use for: Just pop oatmeal and water/milk on the stove and let it boil while you get dressed. Top with seeds, nuts, fruit, coconut flakes — whatever floats your boat. Great for baking too! 8. Hummus: A delicious source of protein, fiber and minerals like iron and calcium! Use for: Hummus is great and easy snack on just about anything (veggies, crackers, baked chips, a condiment on sandwiches. Use it instead of sour cream. Yeah, I said that. 9. Nut milk (i.e., almond/coconut): These readily available dairy alternatives are everywhere now and a great source of: proteins, healthy fats and lots of essential vitamins and minerals depending on which you choose. Good if you’re avoiding dairy products. Use for: I use this in my smoothies, in my oatmeal and in my lattes. 10. Organic boxed broth: Sure, it’s better to have the homemade stuff hanging around in the freezer, but it’s motha-freakin time consuming! Sometime, you just need a box on hand to help start you off. I stick with organic. Use for: When you’re crunched for time, a little boxed broth is a simple base for homemade soups and other dishes. We do what we can, right? 11. Garlic and onions: Both are great healing foods. They’re antioxidants, anti-viral, anti-fungal and loaded with vitamin C, among plenty of other vitamins. Use for: I use garlic and onions as a base for almost everything I cook. Just, chop, slice or dice and sauté with a bit of coconut or olive oil for a huge flavor. Yum. 12. Chickpeas or legumes (canned or dried): Great for protein, fiber, B vitamins and lots of minerals like iron and magnesium. Use for: salad toppers, mix with veggies and quinoa, combined with grains, like brown rice, makes a complete protein, throw in soup, even make your own hummus! 13. Frozen organic berries: Obviously, all sorts of micronutrients and anti-oxidants in these little packages of flavor! Use for: I add these to my morning smoothies, you can also do quick stovetop jam/sauce or use as a topping for cereal/yogurt/oatmeal. 14. Apples: Great for their fiber and vitamin C among many other amazing health benefits. Use for: Portable and easy snacks, good with almond butter, great chopped in salads. 15. Bananas: Great source of potassium, B6 and even vitamin C. Use for: A great way to get sweet without adding refined sugar. Add fresh or frozen to smoothies. Tip: chop in half and store a bunch in the freezer for easy use later. Bananas are also a great addition to oatmeal, chia pudding and wheat-free pancakes and of course you can make banana muffins! 16. Lemons: Like all citrus, lemons deserve a major shout out for their vitamin C. Use for: Adding to water for a great detoxifying drink. Add to olive oil for instant homemade dressing, squeeze on top of veggies, fruits and fish for added flavor, use grated lemon rinds in baking or cooking. 17. Coconut oil: Good quality is key: Look for virgin, organic and cold-pressed. Coconut oil is an easily digestible, healthy saturated fat (MCT) and more stable for higher temp cooking. Don’t ever burn your oil! Use for: higher heat cooking, stir-frying, roasting veggies, frying eggs, good for baking plus you can actually use this for all sorts of skin and hair care! I use it as my daily body moisturizer! You won’t need anything else, I promise! 18. Olive oil: Same as any oil, aim for: organic, extra virgin, cold-pressed. Use for: this is my go-to for easy-to-make salad dressing, also use for low-heat cooking. 19. Vinegar: Balsamic, apple cider, red wine, white wine — pick one and start there!  Use for: mix a little with olive oil to make healthy homemade dressings instead of buying overly-processed, store-bought salad dressing, also add a splash to many other recipes to enhance flavour.", author_id: user1.id, notebook_id: notebook2.id)

note15 = Note.create!(title: "Rotisserie Chicken with Quinoa & Roasted Carrots", body: "<p><img alt='' src='http://cdn.theeverygirl.com/wp-content/uploads/2014/02/DSC_1275.jpg' style='height:1200px; width:803px' scale='0' class='></p><p><br></p><h2><strong>Rotisserie Chicken with Quinoa &amp; Roasted Carrots</strong></h2><p><br></p><p><strong><u>Ingredients:</u></strong></p><p>Storebought rotisserie chicken, sliced</p><p>1/2 c. quinoa</p><p>1 c. water</p><p>Handful of carrots, peeled &amp; sliced</p><p>Curly parsley</p><p>Salt &amp; pepper</p><p><br></p><p><strong><u>Directions:</u></strong></p><p>Pre-heat oven to 375 degrees. Prepare quinoa by adding&nbsp;quinoa and water in a heavy-bottom saucepan on a medium-high heat until it comes to a rolling boil.&nbsp;Let simmer, covered on low heat&nbsp;for 8-10 minutes. Meanwhile, place peeled carrots on a baking sheet. Drizzle carrots with olive oil and season with salt and pepper. Place in the oven to roast for 8-10 minutes until tender. To assemble, top quinoa with your favorite&nbsp;part&nbsp;of the rotisserie chicken and serve carrots on the side.&nbsp;</p>", plain_text_body: "Rotisserie Chicken with Quinoa & Roasted Carrots Ingredients: Storebought rotisserie chicken, sliced 1/2 c. quinoa 1 c. water Handful of carrots, peeled & sliced Curly parsley Salt & pepper Directions: Pre-heat oven to 375 degrees. Prepare quinoa by adding quinoa and water in a heavy-bottom saucepan on a medium-high heat until it comes to a rolling boil. Let simmer, covered on low heat for 8-10 minutes. Meanwhile, place peeled carrots on a baking sheet. Drizzle carrots with olive oil and season with salt and pepper. Place in the oven to roast for 8-10 minutes until tender. To assemble, top quinoa with your favorite part of the rotisserie chicken and serve carrots on the side.", author_id: user1.id, notebook_id: notebook6.id)

note16 = Note.create!(title: "Greek Yogurt with Bananas & Granola", body:"<p><img alt='' src='http://cdn.theeverygirl.com/wp-content/uploads/2014/02/DSC_1345.jpg' style='height:1200px; width:803px' scale='0'></p><p><br></p><p><span class='ql-size-large'>Greek Yogurt with Bananas &amp; Granola</span></p><p><br></p><p><strong><u>Ingredients:</u></strong></p><p>1 c.&nbsp;greek yogurt</p><p>1 banana</p><p>1/2 c. granola</p><p><br></p><p><strong><u>Directions:</u> </strong>Top&nbsp;greek yogurt with sliced bananas and granola</p>", plain_text_body: "Greek Yogurt with Bananas & Granola Ingredients: 1 c. greek yogurt 1 banana 1/2 c. granola Directions: Top greek yogurt with sliced bananas and granola", author_id: user1.id, notebook_id: notebook6.id)

note17 = Note.create!(title: "Spaghetti and Homemade Tomato Sauce", body:"<p><img width='800' height='581' src='http://theeverygirl.com/wp-content/uploads/2014/02/EE_Spaghetti-with-Tomato-Sauce-528129.jpg' class='attachment-full size-full wp-post-image' alt='' scale='0'></p><p><br></p><p><strong class='ql-size-huge' style='color: rgb(230, 0, 0);'>Ingredients</strong></p><ul><li>3 tbsp. extra-virgin olive oil</li><li>1 tbsp. finely chopped garlic</li><li>2 tbsp. chopped fresh basil</li><li>1 tbsp. chopped fresh flat leaf parsley</li><li>1 can (14 oz.) crushed tomatoes</li><li>1/2 can (14 oz.) diced tomatoes, drained</li><li>coarse salt and pepper</li><li>pinch of sugar</li><li>pinch of red chili flakes</li><li>1/2 lb. spaghetti</li><li>2 handfuls of baby arugula</li><li>1 tbsp. extra-virgin olive oil</li><li>fresh mozzarella, sliced or freshly grated Parmesan cheese for serving</li></ul><p><br></p><p><strong class='ql-size-huge' style='color: rgb(230, 0, 0);'>Directions</strong></p><p>Heat the olive oil in a medium sauté&nbsp;pan over medium-low heat. Add the garlic, basil, and parsley, and sauté&nbsp;for about one minute, until fragrant. Add the crushed and diced tomatoes, stir well, and season with salt and pepper. Add the sugar and chili flakes. Lower the heat and cook until the mixture has a nice chunky, saucelike consistency, about 15 minutes.</p><p>Meanwhile, bring a large pot of salted water to a boil. Add the spaghetti and cook until al dente (tender but firm), about 10 minutes. Drain thoroughly, reserving a 1/4 cup of the pasta cooking water.</p>", plain_text_body: "Ingredients 3 tbsp. extra-virgin olive oil 1 tbsp. finely chopped garlic 2 tbsp. chopped fresh basil 1 tbsp. chopped fresh flat leaf parsley 1 can (14 oz.) crushed tomatoes 1/2 can (14 oz.) diced tomatoes, drained coarse salt and pepper pinch of sugar pinch of red chili flakes 1/2 lb. spaghetti 2 handfuls of baby arugula 1 tbsp. extra-virgin olive oil fresh mozzarella, sliced or freshly grated Parmesan cheese for serving Directions Heat the olive oil in a medium sauté pan over medium-low heat. Add the garlic, basil, and parsley, and sauté for about one minute, until fragrant. Add the crushed and diced tomatoes, stir well, and season with salt and pepper. Add the sugar and chili flakes. Lower the heat and cook until the mixture has a nice chunky, saucelike consistency, about 15 minutes. Meanwhile, bring a large pot of salted water to a boil. Add the spaghetti and cook until al dente (tender but firm), about 10 minutes. Drain thoroughly, reserving a 1/4 cup of the pasta cooking water.", author_id: user1.id, notebook_id: notebook6.id)

note18 = Note.create!(title: "Atomic Beer Wings", body:"<p><img style='height: 1035px; width: 800px;' src='http://cdn.theeverygirl.com/wp-content/uploads/2016/01/Atomic20Wings.jpg' alt='' scale='0'></p><p><br></p><p><strong class='ql-size-large'>ATOMIC BEER WINGS</strong></p><p>Prep time:&nbsp;&nbsp;5 mins</p><p>Cook time:&nbsp;&nbsp;24 hours</p><p>Total time:&nbsp;&nbsp;24 hours 5 mins</p><p><br></p><p>Serves:&nbsp;3.5 lb</p><p><br></p><p><strong>RECIPE UPDATE FOR OVEN :</strong></p><p>Preheat oven to 400 degrees. Line a rimmed baking sheet with foil. Place wire racks on top of lined baking sheet. Spray with a little bit of oil. Place wings on top of wire rack and place in oven for 40-50 minutes or until skin is nice and crispy. Remove, toss in desired sauce (or leave naked) and serve!</p><p>&nbsp;</p><p><strong>INGREDIENTS :</strong></p><ul><li>3½ lb (or 3 packages) drummettes (small wings)</li><li>For the Marinade</li><li>2 habaneros, whole</li><li>2 jalapeños, whole</li><li>7 cloves of garlic</li><li>1 tbsp vegetable oil</li><li>½ cup beer (I used Schlafly Kolsch)</li><li>1 tsp paprika</li><li>2 tsp salt</li><li>1 tsp garlic powder (I prefer California style)</li><li>For the Sauce</li><li>Franks Hot Sauce + 2 tsp melted butter</li></ul><p><br></p><p><strong>INSTRUCTIONS :</strong></p><ol><li>Place all marinade ingredients in a food processor, and process until fine chunks. Add wings to a plastic ziplock bag and then add marinade.</li><li>Shake bag until all wings are coated and place in fridge for 24-48 hours. Shaking every 12 hours.</li><li>Once wings are done marinating, remove from fridge 10 minutes before grilling.</li><li>Set grill to medium heat and place wings directly on grill for about 16 minutes (lid closed). Turning wings over half way through.</li><li>Remove from heat and wrap in tinfoil to keep warm.</li><li>Prep sauce and then pour all over wings. Serve alone or with some bleu cheese / ranch dressing.</li></ol><p><br></p><p><strong>NOTES :</strong></p><p>You may actually use any sauce here. Or plain with salt &amp; pepper.</p><p><br></p>", plain_text_body: "ATOMIC BEER WINGS Prep time:  5 mins Cook time:  24 hours Total time:  24 hours 5 mins Serves: 3.5 lb RECIPE UPDATE FOR OVEN : Preheat oven to 400 degrees. Line a rimmed baking sheet with foil. Place wire racks on top of lined baking sheet. Spray with a little bit of oil. Place wings on top of wire rack and place in oven for 40-50 minutes or until skin is nice and crispy. Remove, toss in desired sauce (or leave naked) and serve! INGREDIENTS : 3½ lb (or 3 packages) drummettes (small wings) For the Marinade 2 habaneros, whole 2 jalapeños, whole 7 cloves of garlic 1 tbsp vegetable oil ½ cup beer (I used Schlafly Kolsch) 1 tsp paprika 2 tsp salt 1 tsp garlic powder (I prefer California style) For the Sauce Franks Hot Sauce + 2 tsp melted butter INSTRUCTIONS : Place all marinade ingredients in a food processor, and process until fine chunks. Add wings to a plastic ziplock bag and then add marinade. Shake bag until all wings are coated and place in fridge for 24-48 hours. Shaking every 12 hours. Once wings are done marinating, remove from fridge 10 minutes before grilling. Set grill to medium heat and place wings directly on grill for about 16 minutes (lid closed). Turning wings over half way through. Remove from heat and wrap in tinfoil to keep warm. Prep sauce and then pour all over wings. Serve alone or with some bleu cheese / ranch dressing. NOTES : You may actually use any sauce here. Or plain with salt & pepper.", author_id: user1.id, notebook_id: notebook6.id)

note19 = Note.create!(title: "Fettucine with Caramelized Onions and Swiss Chard", body:"<p><strong style='color: rgb(0, 138, 0);' class='ql-size-large'>Fettuccine with Caramelized Onions and Swiss Chard</strong></p><p><br></p><ul><li>8 oz fresh fettuccine (dry will work if fresh is not available)</li><li>1 large bunch swiss chard, stems removed, leaves chopped</li><li>1/2 cup parmasean cheese + additional for serving</li><li>1 medium onion, chopped</li><li>2 tbs olive oil, divided</li><li>1 clove garlic, diced</li><li>2 tsp red pepper flake</li><li>salt and pepper</li></ul><p><br></p><ul><li>In a skillet over medium heat, warm 1 tbs olive oil. When shimmering, add onions. Let cook, undisturbed for 10 minutes. Stir onions once and continue to cook for 10 minutes. Add a splash of water to the skillet and stir, taking care to scrape up any browned bits. Let cook for an additional 10 minutes, stirring occasionally. After 30 minutes total, onions should be blonde in color and have a jammy consistency. For a darker color and richer flavor, continue cooking an additional 10 minutes, otherwise set aside.&nbsp;</li></ul><p><br></p><ul><li>Warm remaining 1 tbs olive oil in a large skillet over high heat. When hot, add chard, garlic, red pepper flake, salt and pepper. Sauté chard until wilted, about 4 minutes. Remove from heat and set aside, making sure to leave chard in pan.</li></ul><p><br></p><ul><li>Meanwhile, fill a large pot with water, salt generously, and bring to a boil. When a rolling boil has been reached, add pasta. Cook until pasta is al dente, about 3 minutes for fresh fettuccine or 8-9 minutes for dried. Before draining, skim off 1/2 cup of pasta water and set aside.&nbsp;</li></ul><p><br></p><ul><li>Using the same pan from before, warm chard over low heat. Add pasta and 1/4 cup parmesan cheese, tossing gently. Add the caramelized onions, stirring to combine. Working in small additions, add pasta water and remaining parmesan cheese until cheese is melted and the sauce coats the pasta and chard.&nbsp;</li></ul><p><br></p><ul><li>To serve, top with fresh parmesan, and black pepper.&nbsp;</li></ul>", plain_text_body: "Fettuccine with Caramelized Onions and Swiss Chard 8 oz fresh fettuccine (dry will work if fresh is not available) 1 large bunch swiss chard, stems removed, leaves chopped 1/2 cup parmasean cheese + additional for serving 1 medium onion, chopped 2 tbs olive oil, divided 1 clove garlic, diced 2 tsp red pepper flake salt and pepper In a skillet over medium heat, warm 1 tbs olive oil. When shimmering, add onions. Let cook, undisturbed for 10 minutes. Stir onions once and continue to cook for 10 minutes. Add a splash of water to the skillet and stir, taking care to scrape up any browned bits. Let cook for an additional 10 minutes, stirring occasionally. After 30 minutes total, onions should be blonde in color and have a jammy consistency. For a darker color and richer flavor, continue cooking an additional 10 minutes, otherwise set aside.  Warm remaining 1 tbs olive oil in a large skillet over high heat. When hot, add chard, garlic, red pepper flake, salt and pepper. Sauté chard until wilted, about 4 minutes. Remove from heat and set aside, making sure to leave chard in pan. Meanwhile, fill a large pot with water, salt generously, and bring to a boil. When a rolling boil has been reached, add pasta. Cook until pasta is al dente, about 3 minutes for fresh fettuccine or 8-9 minutes for dried. Before draining, skim off 1/2 cup of pasta water and set aside.  Using the same pan from before, warm chard over low heat. Add pasta and 1/4 cup parmesan cheese, tossing gently. Add the caramelized onions, stirring to combine. Working in small additions, add pasta water and remaining parmesan cheese until cheese is melted and the sauce coats the pasta and chard.  To serve, top with fresh parmesan, and black pepper.", author_id: user1.id, notebook_id: notebook6.id)

note20 = Note.create!(title: "Grilled BBQ Chicken Pizza", body: "<p><img class='photo' itemprop='image' src='http://d2814mmsvlryp1.cloudfront.net/wp-content/uploads/WGC-BBQ-Chicken-Pizza-3-copy-2.jpg' title='Grilled BBQ Chicken Pizza' alt='Grilled BBQ Chicken Pizza' scale='0'></p><p><br></p><p><strong>INGREDIENTS</strong></p><ul><li>1 recipe&nbsp;<a href='http://whatsgabycooking.com/homemade-pizza-dough' target='_blank' style='color: rgb(236, 61, 66);'>Homemade Pizza Dough</a></li><li>olive oil for brushing</li><li>1/3 - ½ cup BBQ sauce</li><li>Fresh mozzarella cheese, torn</li><li>1 cup shredded cooked chicken</li><li>1/2 cup corn, cut off the cob</li><li>1/4 red onion, thinly sliced</li><li>1/2 cup halved cherry tomatoes</li><li>small handful of cilantro</li><li>small handful of chopped green onions</li><li>kosher salt and freshly cracked black pepper to taste</li></ul><p><br></p><p><strong>INSTRUCTIONS</strong></p><ol><li>Prepare a gas or charcoal grill to high heat. Brush the grill with a bit of oil.</li><li>Shape the dough into 2 medium-ish pizzas while on a clean floured surface. Let the dough sit for 5 minutes and then re-form to make sure it's as big as you'd like. Place the pizza dough on a lightly floured rimless baking sheet, or pizza peel.</li><li>Transfer the dough over to the grill, and slide the pizza dough directly onto the grill. Grill the dough for about 2 minutes with the lid closed. Using a pair of tongs, lift the lid, and flip the dough over onto the other side and cook for about 2 minutes more. The dough should be golden brown with grill marks on both sides.</li><li>Once the dough is cooked, remove it from the grill and place it back onto the baking sheet.</li><li>Brush the olive oil over the top side pizza and then spread the BBQ. Arrange the mozzarella, shredded chicken, corn and red onion and place back onto the grill until the cheese has melted.</li><li>Using tongs, remove the pizza from the grill and season with salt and pepper as needed. Top with the cherry tomatoes, cilantro, green onions and serve immediately.</li></ol>", plain_text_body: "INGREDIENTS 1 recipe Homemade Pizza Dough olive oil for brushing 1/3 - ½ cup BBQ sauce Fresh mozzarella cheese, torn 1 cup shredded cooked chicken 1/2 cup corn, cut off the cob 1/4 red onion, thinly sliced 1/2 cup halved cherry tomatoes small handful of cilantro small handful of chopped green onions kosher salt and freshly cracked black pepper to taste INSTRUCTIONS Prepare a gas or charcoal grill to high heat. Brush the grill with a bit of oil. Shape the dough into 2 medium-ish pizzas while on a clean floured surface. Let the dough sit for 5 minutes and then re-form to make sure it's as big as you'd like. Place the pizza dough on a lightly floured rimless baking sheet, or pizza peel. Transfer the dough over to the grill, and slide the pizza dough directly onto the grill. Grill the dough for about 2 minutes with the lid closed. Using a pair of tongs, lift the lid, and flip the dough over onto the other side and cook for about 2 minutes more. The dough should be golden brown with grill marks on both sides. Once the dough is cooked, remove it from the grill and place it back onto the baking sheet. Brush the olive oil over the top side pizza and then spread the BBQ. Arrange the mozzarella, shredded chicken, corn and red onion and place back onto the grill until the cheese has melted. Using tongs, remove the pizza from the grill and season with salt and pepper as needed. Top with the cherry tomatoes, cilantro, green onions and serve immediately.", author_id: user1.id, notebook_id: notebook6.id)

note21 = Note.create!(title: "THE COMPLETE 4-WEEK BEGINNER'S WORKOUT PROGRAM", body: "<h3><strong style='color: rgb(230, 0, 0);'>WEEK 1: WHOLE IN ONE</strong></h3><p>You’ll begin the program with a full-body training split, meaning you’ll train all major bodyparts in each workout (as opposed to “splitting up” your training). Train three days this first week, performing just one exercise per bodypart in each session. It’s important that you have a day of rest between each workout to allow your body to recover; this makes training Monday, Wednesday and Friday—with Saturday and Sunday being rest days—a good approach.</p><p><br></p><p>The exercises listed in Week 1 are a collection of basic moves that, while also used by advanced lifters, we feel are suitable for the beginner as well. Notice we’re not starting you off with only machine exercises; a handful of free-weight movements are present right off the bat. Reason being, these are the exercises you need to master for long-term gains in muscular size and strength, so you may as well start learning them now. Carefully read all exercise descriptions, starting on page, before attempting them yourself.</p><p><br></p><p>In Week 1 you’ll perform three sets of every exercise per workout, which over the course of the week adds up to nine sets total for each bodypart, a good starting volume for your purposes. With the exception of crunches for abs, you’ll do 8–12 reps per set. This rep scheme is widely considered ideal for achieving gains in muscle size (the scientific term is hypertrophy) and is commonly employed by amateur and pro bodybuilders alike.</p><p><br></p><p>Notice in the workouts below that your first set calls for eight reps, your second set 10 reps and your third set 12. This is referred to in bodybuilding circles as a “reverse pyramid” (a standard pyramid goes from higher to lower reps), where you decrease the weight each set to complete the higher rep count. For example, if on your first set of lat pulldowns you used 140 pounds for eight reps, try using 120 or 130 pounds on set two and 100–120 pounds on set three.</p><p><br></p><h3><strong style='color: rgb(230, 0, 0);'>WEEK 2: SPLIT DECISION</strong></h3><p>You’re only a week into the program, yet you’ll begin to train different bodyparts on different days with a two-day training split (meaning the entire body is trained over the course of two days, rather than one as in the first week). You’ll train a total of four days this week; the split includes two upper-body days (Monday and Thursday) and two lower-body days (Tuesday and Friday), and each bodypart is trained twice. Wednesday, Saturday and Sunday will be your recovery days.</p><p><br></p><p>Several exercises from Week 1 are carried over to Week 2, but one move is added to each bodypart routine—with the exception of abs—so you can train all muscle groups more completely from multiple angles. Chest, for example, includes two exercises: One is a compound movement (dumbbell bench press) that involves multiple joints (both the shoulder and elbow) to work the largest amount of muscle possible, and the other is an isolation exercise (dumbbell flye) that involves only one joint (shoulder) and targets the pecs to a greater extent. (When doing presses for chest, the deltoids and triceps are involved to a degree, meaning presses don’t isolate the pecs as much as flyes do.)</p><p><br></p><p>You’ll again employ a reverse pyramid scheme of reps, though in Week 2 you’ll go slightly higher in reps (15) on your third set of each exercise. Fifteen reps may be just outside the ideal muscle-building range, but these sets will help you increase muscular endurance to provide a solid foundation on which to build size and strength going forward.</p><p><br></p><h3><strong style='color: rgb(230, 0, 0);'>WEEK 3: THREE ON THREE</strong></h3><p>In the third week of the program we step it up to a three-day training split: Train all “pushing” bodyparts (chest, shoulders, triceps) on Day 1; hit the “pulling” bodyparts (back, biceps) and abs on Day 2; and work your lower body (quads, glutes, hamstrings, calves) on Day 3. As in Week 2, you train each bodypart twice a week, so you’ll hit the gym six days this week.</p><p><br></p><p>One new exercise is added to each bodypart routine to provide even more angles from which to train your target muscles to promote complete development. You’ll hit each muscle group with two exercises of 3­–4 sets each: four sets for large bodyparts (chest, back, shoulders, quads, hamstrings) and three sets for smaller bodyparts (biceps, triceps, abs, calves). The result is 16 total sets for the week for large bodyparts and 12 sets total for smaller ones—again, working in the 8–15-rep range—which is a substantial increase in volume from Week 1.</p><p><br></p><h3><strong style='color: rgb(230, 0, 0);'>WEEK 4: TURNING UP THE VOLUME</strong></h3><p>In the fourth and final week of the program, you’ll train four days in a four-way split that hits each bodypart just once (except for calves and abs, which are each trained twice). Four-day splits are common among experienced lifters because they involve training fewer bodyparts (typically 2–3) per workout, which gives each muscle group ample attention and allows you to train with higher volume. As you’ll see, chest and triceps are paired up, as are back with biceps and quads with hamstrings, each a very common pairing among novice and advanced bodybuilders. Shoulders are trained more or less on their own, and you’ll alternate hitting calves and abs—which respond well to being trained multiple times per week—every other workout. No new exercises are introduced in Week 4 so that you can focus on intensity in your workouts instead of learning new movements.</p><p><br></p><p>Rep schemes remain in the hypertrophy range this week, but overall volume increases by adding more sets to individual exercises: up to five sets per move for larger bodyparts, and even 10 sets of calf raises on Thursday. This bump in volume will ensure that your muscles are overloaded sufficiently to continue the growth they’ve already begun experiencing in the first three weeks. Completion of this four-week program now entitles you to go to the next stage.</p>", plain_text_body: "WEEK 1: WHOLE IN ONE You’ll begin the program with a full-body training split, meaning you’ll train all major bodyparts in each workout (as opposed to “splitting up” your training). Train three days this first week, performing just one exercise per bodypart in each session. It’s important that you have a day of rest between each workout to allow your body to recover; this makes training Monday, Wednesday and Friday—with Saturday and Sunday being rest days—a good approach. The exercises listed in Week 1 are a collection of basic moves that, while also used by advanced lifters, we feel are suitable for the beginner as well. Notice we’re not starting you off with only machine exercises; a handful of free-weight movements are present right off the bat. Reason being, these are the exercises you need to master for long-term gains in muscular size and strength, so you may as well start learning them now. Carefully read all exercise descriptions, starting on page, before attempting them yourself. In Week 1 you’ll perform three sets of every exercise per workout, which over the course of the week adds up to nine sets total for each bodypart, a good starting volume for your purposes. With the exception of crunches for abs, you’ll do 8–12 reps per set. This rep scheme is widely considered ideal for achieving gains in muscle size (the scientific term is hypertrophy) and is commonly employed by amateur and pro bodybuilders alike. Notice in the workouts below that your first set calls for eight reps, your second set 10 reps and your third set 12. This is referred to in bodybuilding circles as a “reverse pyramid” (a standard pyramid goes from higher to lower reps), where you decrease the weight each set to complete the higher rep count. For example, if on your first set of lat pulldowns you used 140 pounds for eight reps, try using 120 or 130 pounds on set two and 100–120 pounds on set three. WEEK 2: SPLIT DECISION You’re only a week into the program, yet you’ll begin to train different bodyparts on different days with a two-day training split (meaning the entire body is trained over the course of two days, rather than one as in the first week). You’ll train a total of four days this week; the split includes two upper-body days (Monday and Thursday) and two lower-body days (Tuesday and Friday), and each bodypart is trained twice. Wednesday, Saturday and Sunday will be your recovery days. Several exercises from Week 1 are carried over to Week 2, but one move is added to each bodypart routine—with the exception of abs—so you can train all muscle groups more completely from multiple angles. Chest, for example, includes two exercises: One is a compound movement (dumbbell bench press) that involves multiple joints (both the shoulder and elbow) to work the largest amount of muscle possible, and the other is an isolation exercise (dumbbell flye) that involves only one joint (shoulder) and targets the pecs to a greater extent. (When doing presses for chest, the deltoids and triceps are involved to a degree, meaning presses don’t isolate the pecs as much as flyes do.) You’ll again employ a reverse pyramid scheme of reps, though in Week 2 you’ll go slightly higher in reps (15) on your third set of each exercise. Fifteen reps may be just outside the ideal muscle-building range, but these sets will help you increase muscular endurance to provide a solid foundation on which to build size and strength going forward. WEEK 3: THREE ON THREE In the third week of the program we step it up to a three-day training split: Train all “pushing” bodyparts (chest, shoulders, triceps) on Day 1; hit the “pulling” bodyparts (back, biceps) and abs on Day 2; and work your lower body (quads, glutes, hamstrings, calves) on Day 3. As in Week 2, you train each bodypart twice a week, so you’ll hit the gym six days this week. One new exercise is added to each bodypart routine to provide even more angles from which to train your target muscles to promote complete development. You’ll hit each muscle group with two exercises of 3­–4 sets each: four sets for large bodyparts (chest, back, shoulders, quads, hamstrings) and three sets for smaller bodyparts (biceps, triceps, abs, calves). The result is 16 total sets for the week for large bodyparts and 12 sets total for smaller ones—again, working in the 8–15-rep range—which is a substantial increase in volume from Week 1. WEEK 4: TURNING UP THE VOLUME In the fourth and final week of the program, you’ll train four days in a four-way split that hits each bodypart just once (except for calves and abs, which are each trained twice). Four-day splits are common among experienced lifters because they involve training fewer bodyparts (typically 2–3) per workout, which gives each muscle group ample attention and allows you to train with higher volume. As you’ll see, chest and triceps are paired up, as are back with biceps and quads with hamstrings, each a very common pairing among novice and advanced bodybuilders. Shoulders are trained more or less on their own, and you’ll alternate hitting calves and abs—which respond well to being trained multiple times per week—every other workout. No new exercises are introduced in Week 4 so that you can focus on intensity in your workouts instead of learning new movements. Rep schemes remain in the hypertrophy range this week, but overall volume increases by adding more sets to individual exercises: up to five sets per move for larger bodyparts, and even 10 sets of calf raises on Thursday. This bump in volume will ensure that your muscles are overloaded sufficiently to continue the growth they’ve already begun experiencing in the first three weeks. Completion of this four-week program now entitles you to go to the next stage.", author_id: user1.id, notebook_id: notebook4.id)

note22 = Note.create!(title: "5 Day Workout Plan", body: "<h4><strong>Monday: Legs &amp; Butt</strong></h4><ul><li>Warm Up Wide Stance Bodyweight Squat:&nbsp;2 sets x 15-20 reps</li><li>Wide Stance Barbell Squat:&nbsp;4 sets x 8-12 reps</li><li>Romanian Deadlift:&nbsp;4 sets x 8-12 reps</li><li>Glute Bridge:&nbsp;4 sets x 15-20 reps</li><li>Glute Kickback:&nbsp;4 sets x 15-20 reps (each leg)</li></ul><p><br></p><h4><strong>Tuesday: Upper Body</strong></h4><ul><li>Warm Up Bench Press:&nbsp;2 sets x 15-20 reps</li><li>Bench Press:&nbsp;4 sets x 8-12 reps</li><li>(Knee) Push Ups:&nbsp;4 sets x 8-12 reps</li><li>Lat Pulldown:&nbsp;4 sets x 12-15 reps</li><li>Seated Cable Row:&nbsp;4 sets x 12-15 reps</li></ul><p><br></p><h4><strong>Wednesday: Core &amp; LISS Cardio</strong></h4><ul><li>Warm Up Crunches:&nbsp;2 sets x 10 reps</li><li>Roman Chair Leg Raise:&nbsp;4 sets x 10-15 reps</li><li>Roman Chair Oblique Leg Raise:&nbsp;4 sets x 10-15 reps (each side)</li><li>LISS Cardio - Treadmill / Bike - 6/10 effort level:&nbsp;20-30 minutes</li></ul><p><br></p><h4><strong>Thursday: Legs &amp; Butt &amp; Calves</strong></h4><ul><li>Warm Up Stiff-Legged Barbell Deadlift:&nbsp;2 sets x 15-20 reps</li><li>Stiff-Legged Barbell Deadlift:&nbsp;4 sets x 15-20 reps</li><li>Glute Bridge:&nbsp;4 sets x 15-20 reps</li><li>Reverse Lunge:&nbsp;4 sets x 8-12 reps (each leg)</li><li>Standing Calf Raise:&nbsp;4 sets x 12-15 reps</li></ul><p><br></p><h4><strong>Friday: Upper Body + HIIT Cardio</strong></h4><ul><li>Warm Up standing Barbell Shoulder Press:&nbsp;2 sets x 15-20 reps</li><li>Standing Barbell Shoulder Press:&nbsp;4 sets x 8-12 reps</li><li>Side Lateral Raise:&nbsp;4 sets x 12-15 reps</li><li>EZ Barbell Bicep Curl:&nbsp;4 sets x 12-15 reps</li><li>Tricep Dips:&nbsp;4 sets x 12-15 reps</li><li>HIIT Cardio - Treadmill or Bike - 8/10 effort level:&nbsp;10 rounds - 20 seconds of work - 40 seconds of recovery</li></ul>", plain_text_body: "Monday: Legs & ButtWarm Up Wide Stance Bodyweight Squat: 2 sets x 15-20 repsWide Stance Barbell Squat: 4 sets x 8-12 repsRomanian Deadlift: 4 sets x 8-12 repsGlute Bridge: 4 sets x 15-20 repsGlute Kickback: 4 sets x 15-20 reps (each leg)Tuesday: Upper BodyWarm Up Bench Press: 2 sets x 15-20 repsBench Press: 4 sets x 8-12 reps(Knee) Push Ups: 4 sets x 8-12 repsLat Pulldown: 4 sets x 12-15 repsSeated Cable Row: 4 sets x 12-15 reps Wednesday: Core & LISS CardioWarm Up Crunches: 2 sets x 10 repsRoman Chair Leg Raise: 4 sets x 10-15 repsRoman Chair Oblique Leg Raise: 4 sets x 10-15 reps (each side)LISS Cardio - Treadmill / Bike - 6/10 effort level: 20-30 minutes Thursday: Legs & Butt & CalvesWarm Up Stiff-Legged Barbell Deadlift: 2 sets x 15-20 repsStiff-Legged Barbell Deadlift: 4 sets x 15-20 repsGlute Bridge: 4 sets x 15-20 repsReverse Lunge: 4 sets x 8-12 reps (each leg)Standing Calf Raise: 4 sets x 12-15 reps Friday: Upper Body + HIIT Cardio Warm Up standing Barbell Shoulder Press: 2 sets x 15-20 reps Standing Barbell Shoulder Press: 4 sets x 8-12 reps Side Lateral Raise: 4 sets x 12-15 reps EZ Barbell Bicep Curl: 4 sets x 12-15 reps Tricep Dips: 4 sets x 12-15 reps HIIT Cardio - Treadmill or Bike - 8/10 effort level: 10 rounds - 20 seconds of work - 40 seconds of recovery", author_id: user1.id, notebook_id: notebook4.id)

note23 = Note.create!(title: "Workout 1", body: "<h2><strong>Workout 1: Elliptical</strong></h2><p><br></p><p><strong>Time:</strong>&nbsp;20 minutes</p><p><br></p><p>Warm up for 3 minutes.</p><p>Then start this series of intervals, which get longer and then shorter.</p><p>Push yourself during the intervals, working at an 8-9 on a 10-point scale, with 10 being your maximum ability and 1 being sitting still.</p><p>During the recovery, cut your pace to a 5-7 on that same 10-point scale.</p><ul><li>15-second interval, followed by 15-second recovery. Repeat once.</li><li>30-second interval, followed by 30 seconds of recovery. Repeat once.</li><li>45-second interval, followed by 45-second recovery. Do not repeat.</li><li>1-minute interval, followed by 1-minute recovery. Repeat 3 more times.</li><li>45-second interval, followed by 45-second recovery. Do not repeat.</li><li>30-second interval, followed by 30-second recovery. Repeat once.</li><li>15-second interval, followed by 15-second recovery. Repeat once.</li></ul><p>Cool down for 3 minutes.</p>", plain_text_body: "Workout 1: EllipticalTime: 20 minutesWarm up for 3 minutes.Then start this series of intervals, which get longer and then shorter.Push yourself during the intervals, working at an 8-9 on a 10-point scale, with 10 being your maximum ability and 1 being sitting still. During the recovery, cut your pace to a 5-7 on that same 10-point scale. 15-second interval, followed by 15-second recovery. Repeat once. 30-second interval, followed by 30 seconds of recovery. Repeat once. 45-second interval, followed by 45-second recovery. Do not repeat. 1-minute interval, followed by 1-minute recovery. Repeat 3 more times. 45-second interval, followed by 45-second recovery. Do not repeat. 30-second interval, followed by 30-second recovery. Repeat once. 15-second interval, followed by 15-second recovery. Repeat once. Cool down for 3 minutes.", author_id: user1.id, notebook_id: notebook4.id)

note24 = Note.create!(title: "Workout2", body: "<h2><strong>Workout 2: Treadmill</strong></h2><p><br></p><p><strong>Time:</strong>&nbsp;30 minutes</p><p><br></p><p><strong>Minutes 0-5:</strong>&nbsp;Leave the incline at 0% (flat). Walk at a pace so that you're working at a 4 on a scale of 1-10, with 1 being sitting still and 10 being your max.</p><p><br></p><p><strong>Minutes 5-7:</strong>&nbsp;Set the incline at 5% and adjust your pace so your level of effort is a 7 out of 10.</p><p><br></p><p><strong>Minutes 7-8:</strong>&nbsp;Keep the incline at 5% and back down your pace slightly, so your level of effort is a 6 out of 10.</p><p><br></p><p><strong>Minutes 8-14:</strong>&nbsp;Bump up the incline to 6% and rev up your pace, so your level of effort is 8 out of 10.</p><p><br></p><p><strong>Minutes 14-17:</strong>&nbsp;Lower the incline to 4% and slow down so your level of effort is a 5 out of 10.</p><p><br></p><p><strong>Minutes 17-19:</strong>&nbsp;Raise the incline to 5% and move faster, so your level of effort is a 7 out of 10.</p><p><br></p><p><strong>Minutes 19-20:</strong>&nbsp;Keep the incline at 5% and back down your pace so your level of effort is a 6 out of 10.</p><p><br></p><p><strong>Minutes 20-21:</strong>&nbsp;Lower the incline to 2% and push your pace until you are near your maximum effort, at a 9 out of 10.</p><p><br></p><p><strong>Minutes 21-23:</strong>&nbsp;Raise the incline to 4% and slow down your pace until your level of effort is a 5 out of 10.</p><p><br></p><p><strong>Minutes 23-25:</strong>&nbsp;With the incline at 5%, move fast enough that your level of effort is a 7 out of 10.</p><p><br></p><p><strong>Minutes 25-26:</strong>&nbsp;Keep the incline at 5% and slow down a little bit, so your level of effort is a 6 out of 10.</p><p><br></p><p><strong>Minutes 26-30:</strong>&nbsp;Lower the incline and slow down so that your level of effort is a 4 out of 10.</p>", plain_text_body: "Workout 2: Treadmill Time: 30 minutes Minutes 0-5: Leave the incline at 0% (flat). Walk at a pace so that you're working at a 4 on a scale of 1-10, with 1 being sitting still and 10 being your max. Minutes 5-7: Set the incline at 5% and adjust your pace so your level of effort is a 7 out of 10. Minutes 7-8: Keep the incline at 5% and back down your pace slightly, so your level of effort is a 6 out of 10. Minutes 8-14: Bump up the incline to 6% and rev up your pace, so your level of effort is 8 out of 10. Minutes 14-17: Lower the incline to 4% and slow down so your level of effort is a 5 out of 10. Minutes 17-19: Raise the incline to 5% and move faster, so your level of effort is a 7 out of 10. Minutes 19-20: Keep the incline at 5% and back down your pace so your level of effort is a 6 out of 10. Minutes 20-21: Lower the incline to 2% and push your pace until you are near your maximum effort, at a 9 out of 10. Minutes 21-23: Raise the incline to 4% and slow down your pace until your level of effort is a 5 out of 10. Minutes 23-25: With the incline at 5%, move fast enough that your level of effort is a 7 out of 10. Minutes 25-26: Keep the incline at 5% and slow down a little bit, so your level of effort is a 6 out of 10. Minutes 26-30: Lower the incline and slow down so that your level of effort is a 4 out of 10.", author_id: user1.id, notebook_id: notebook4.id)

note25 = Note.create!(title: "Workout 3", body: "<h2><strong>Workout 3: Stationary bike</strong></h2><p><br></p><p><strong>Time:</strong>&nbsp;60 minutes</p><p><br></p><p><strong>Minutes 0-5:</strong>&nbsp;Use light resistance. Your level of effort is a 5 on a scale of 1-10, where 1 is sitting still and 10 is your maximum effort.</p><p><br></p><p><strong>Minutes 5-10:</strong>&nbsp;Bump up to moderate resistance and pedal faster. Level of effort: 7</p><p><br></p><p><strong>Minutes 10-15:</strong>&nbsp;Shift into heavy resistance and slow down a bit. Level of effort: 8</p><p><br></p><p><strong>Minutes 15-20:</strong>&nbsp;Still at heavy resistance, slow down some more. Level of effort: 7</p><p><br></p><p><strong>Minutes 20-25:</strong>&nbsp;Shift to light resistance and pick up the pace. Level of effort: 5</p><p><br></p><p><strong>Minutes 25-30:</strong>&nbsp;Move into moderate resistance and go a bit faster. Level of effort: 6</p><p><br></p><p><strong>Minutes 30-35</strong>&nbsp;Go back to heavy resistance and slow down. Level of effort: 7</p><p><br></p><p><strong>Minutes 35-40:</strong>&nbsp;Shift to moderate resistance and pedal faster. Level of effort: 6</p><p><br></p><p><strong>Minutes 40-45:</strong>&nbsp;Go to heavy resistance, and go slower. Level of effort: 7</p><p><br></p><p><strong>Minutes 45-50:</strong>&nbsp;Work at moderate resistance at a faster pace. Level of effort: 6</p><p><br></p><p><strong>Minutes 50-55:</strong>&nbsp;Shift back to heavy resistance and slow down. Level of effort: 8</p><p><br></p><p><strong>Minutes 55-60:</strong>&nbsp;Nearly done! Go to light resistance and speed up. Level of effort: 5</p>", plain_text_body: "Workout 3: Stationary bike Time: 60 minutes Minutes 0-5: Use light resistance. Your level of effort is a 5 on a scale of 1-10, where 1 is sitting still and 10 is your maximum effort. Minutes 5-10: Bump up to moderate resistance and pedal faster. Level of effort: 7 Minutes 10-15: Shift into heavy resistance and slow down a bit. Level of effort: 8 Minutes 15-20: Still at heavy resistance, slow down some more. Level of effort: 7 Minutes 20-25: Shift to light resistance and pick up the pace. Level of effort: 5 Minutes 25-30: Move into moderate resistance and go a bit faster. Level of effort: 6 Minutes 30-35 Go back to heavy resistance and slow down. Level of effort: 7 Minutes 35-40: Shift to moderate resistance and pedal faster. Level of effort: 6 Minutes 40-45: Go to heavy resistance, and go slower. Level of effort: 7 Minutes 45-50: Work at moderate resistance at a faster pace. Level of effort: 6 Minutes 50-55: Shift back to heavy resistance and slow down. Level of effort: 8 Minutes 55-60: Nearly done! Go to light resistance and speed up. Level of effort: 5", author_id: user1.id, notebook_id: notebook4.id)

note26 = Note.create!(title: "Workout 4", body: "<h2><strong>Workout 4: Rowing</strong></h2><p><br></p><p><strong>Time:</strong>&nbsp;You choose</p><p><br></p><ul><li>Set the damper between 2 and 5.</li></ul><p><br></p><ul><li>Warm up for 3-5 minutes at a comfortable pace.</li></ul><p><br></p><ul><li>Row 500 meters as quickly as you can, working at a level of 7-9 on a scale of 1-10, where 1 is sitting still and 10 is your max.</li></ul><p><br></p><ul><li>Recover 2 minutes at an easier pace. Your level of effort should be a 4-6 out of 10.</li></ul><p><br></p><ul><li>Repeat the 500-meter row and 2 minutes of recovery as many times as you like.</li></ul><p><br></p><ul><li>Cool down for 3-5 minutes at a comfortable pace.</li></ul>", plain_text_body: "Workout 4: Rowing Time: You choose Set the damper between 2 and 5. Warm up for 3-5 minutes at a comfortable pace. Row 500 meters as quickly as you can, working at a level of 7-9 on a scale of 1-10, where 1 is sitting still and 10 is your max. Recover 2 minutes at an easier pace. Your level of effort should be a 4-6 out of 10. Repeat the 500-meter row and 2 minutes of recovery as many times as you like. Cool down for 3-5 minutes at a comfortable pace.", author_id: user1.id, notebook_id: notebook4.id)

tag1 = Tag.create!(name: "school", author_id: user1.id)
tag2 = Tag.create!(name: "travel", author_id: user1.id)
tag3 = Tag.create!(name: "work", author_id: user1.id)
tag5 = Tag.create!(name: "shop", author_id: user1.id)
tag6 = Tag.create!(name: "important", author_id: user1.id)
tag7 = Tag.create!(name: "recipe", author_id: user1.id)
tag8 = Tag.create!(name: "family", author_id: user1.id)
tag9 = Tag.create!(name: "workout", author_id: user1.id)
tag10 = Tag.create!(name: "music", author_id: user1.id)

tagging1 = Tagging.create!(note_id: note1.id, tag_name: tag1.name)
tagging2 = Tagging.create!(note_id: note2.id, tag_name: tag1.name)
tagging3 = Tagging.create!(note_id: note3.id, tag_name: tag1.name)
tagging4 = Tagging.create!(note_id: note4.id, tag_name: tag1.name)
tagging5 = Tagging.create!(note_id: note5.id, tag_name: tag1.name)
tagging6 = Tagging.create!(note_id: note6.id, tag_name: tag1.name)
tagging7 = Tagging.create!(note_id: note7.id, tag_name: tag1.name)
tagging8 = Tagging.create!(note_id: note8.id, tag_name: tag1.name)
tagging9 = Tagging.create!(note_id: note9.id, tag_name: tag1.name)
tagging10 = Tagging.create!(note_id: note10.id, tag_name: tag1.name)
tagging11 = Tagging.create!(note_id: note11.id, tag_name: tag5.name)
tagging12 = Tagging.create!(note_id: note12.id, tag_name: tag5.name)
tagging13 = Tagging.create!(note_id: note13.id, tag_name: tag5.name)
tagging14 = Tagging.create!(note_id: note14.id, tag_name: tag5.name)
tagging15 = Tagging.create!(note_id: note15.id, tag_name: tag7.name)
tagging16 = Tagging.create!(note_id: note16.id, tag_name: tag7.name)
tagging17 = Tagging.create!(note_id: note17.id, tag_name: tag7.name)
tagging18 = Tagging.create!(note_id: note18.id, tag_name: tag7.name)
tagging19 = Tagging.create!(note_id: note19.id, tag_name: tag7.name)
tagging20 = Tagging.create!(note_id: note20.id, tag_name: tag7.name)
tagging21 = Tagging.create!(note_id: note21.id, tag_name: tag9.name)
tagging22 = Tagging.create!(note_id: note22.id, tag_name: tag9.name)
tagging23 = Tagging.create!(note_id: note23.id, tag_name: tag9.name)
tagging24 = Tagging.create!(note_id: note24.id, tag_name: tag9.name)
tagging25 = Tagging.create!(note_id: note25.id, tag_name: tag9.name)
tagging26 = Tagging.create!(note_id: note26.id, tag_name: tag9.name)
