# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

User.destroy_all
Note.destroy_all
Notebook.destroy_all
Tag.destroy_all
Tagging.destroy_all

user1 = User.create!(email: "demo@appacademy.io", username: "demo", image_url: "https://res.cloudinary.com/malice/image/upload/c_scale,w_100/v1500414084/default-profile-pic_bhulg4.svg", password: "password");

notebook1 = Notebook.create!(title: "App Academy", author_id: user1.id)
notebook2 = Notebook.create!(title: "Shopping Lists", author_id: user1.id)
notebook3 = Notebook.create!(title: "To-Dos", author_id: user1.id)
notebook4 = Notebook.create!(title: "Gym", author_id: user1.id)
notebook5 = Notebook.create!(title: "Misc", author_id: user1.id)
notebook6 = Notebook.create!(title: "Food", author_id: user1.id)
notebook7 = Notebook.create!(title: "Christmas Gift Ideas", author_id: user1.id)
notebook8 = Notebook.create!(title: "Movie Ideas", author_id: user1.id)
notebook9 = Notebook.create!(title: "Schedules", author_id: user1.id)
notebook10 = Notebook.create!(title: "Evernote", author_id: user1.id)

note1 = Note.create!(title: "React", body: "<p><strong style='color: rgb(0, 102, 204);'' class='ql-size-large'>A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES</strong></p><p><strong class='ql-size-large'>Declarative</strong></p><p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug.</p><p><br></p><p><strong class='ql-size-large'>Component-Based</strong></p><p>Build encapsulated components that manage their own state, then compose them to make complex UIs.</p><p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the&nbsp;DOM.</p><p><br></p><p><strong class='ql-size-large'>Learn&nbsp;Once, Write&nbsp;Anywhere</strong></p><p>We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using&nbsp;React Native.</p>", plain_text_body: "A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES Declarative React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable and easier to debug. Component-Based Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM. Learn Once, Write Anywhere We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.", author_id: user1.id, notebook_id: notebook1.id)

note2 = Note.create!(title: "jQuery", body: "<p><strong class='ql-size-large' style='color: rgb(230, 0, 0);'>What is jQuery?</strong></p><p><br></p><p>jQuery is a lightweight, 'write less, do more', JavaScript library.</p><p>The purpose of jQuery is to make it much easier to use JavaScript on your website.</p><p>jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.</p><p>jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.</p><p><br></p><p>The jQuery library contains the following features:</p><ul><li>HTML/DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul><p><br></p><p><strong class='ql-size-large' style='color: rgb(230, 0, 0);'>Why jQuery?</strong></p><p><br></p><p>There are lots of other JavaScript frameworks out there, but jQuery seems to be the most popular, and also the most extendable.</p><p>Many of the biggest companies on the Web use jQuery, such as:</p><p><br></p><ul><li>Google</li><li>Microsoft</li><li>IBM</li><li>Netflix</li></ul><p><br></p><p><br></p>", plain_text_body: "What is jQuery? jQuery is a lightweight, 'write less, do more', JavaScript library. The purpose of jQuery is to make it much easier to use JavaScript on your website. jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code. jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation. The jQuery library contains the following features: HTML/DOM manipulation CSS manipulation HTML event methods Effects and animations AJAX Utilities Why jQuery? There are lots of other JavaScript frameworks out there, but jQuery seems to be the most popular, and also the most extendable. Many of the biggest companies on the Web use jQuery, such as: Google Microsoft IBM Netflix", author_id: user1.id, notebook_id: notebook1.id)

note3 = Note.create!(title: "Getting Started", body: "<h1><strong>Hello World</strong></h1><p>The easiest way to get started with React is to use&nbsp;<a href='http://codepen.io/gaearon/pen/ZpvBNJ?editors=0010' target='_blank' style='color: rgb(192, 91, 77);'>this Hello World example code on CodePen</a>. You don't need to install anything; you can just open it in another tab and follow along as we go through examples. If you'd rather use a local development environment, check out the&nbsp;<a href='https://facebook.github.io/react/docs/installation.html' target='_blank' style='color: rgb(192, 91, 77);'>Installation</a>&nbsp;page.</p><p><br></p><p>The smallest React example looks like this:</p><pre class='ql-syntax' spellcheck='false'>ReactDOM.render(
  &lt;h1&gt;Hello, world!&lt;/h1&gt;,
  document.getElementById('root')
);
</pre><p><br></p><p>It renders a header saying 'Hello World' on the page.</p><p>The next few sections will gradually introduce you to using React. We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.</p><p><br></p><h2><strong>A Note on JavaScript</strong></h2><p>React is a JavaScript library, and so it assumes you have a basic understanding of the JavaScript language. If you don't feel very confident, we recommend&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript' target='_blank' style='color: rgb(192, 91, 77);'>refreshing your JavaScript knowledge</a>&nbsp;so you can follow along more easily.</p><p>We also use some of the ES6 syntax in the examples. We try to use it sparingly because it's still relatively new, but we encourage you to get familiar with&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions' target='_blank' style='color: rgb(192, 91, 77);'>arrow functions</a>,&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes' target='_blank' style='color: rgb(192, 91, 77);'>classes</a>,&nbsp;<a href='https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals' target='_blank' style='color: rgb(192, 91, 77);'>template literals</a>,&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let' target='_blank' style='color: rgb(192, 91, 77); background-color: rgba(0, 0, 0, 0.04);'><code>let</code></a>, and&nbsp;<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const' target='_blank' style='color: rgb(192, 91, 77); background-color: rgba(0, 0, 0, 0.04);'><code>const</code></a>&nbsp;statements. You can use&nbsp;<a href='http://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&â€¦.getElementById('root')%3B%0AReactDOM.render(element%2C%20container)%3B%0A' target='_blank' style='color: rgb(192, 91, 77);'>Babel REPL</a>&nbsp;to check what ES6 code compiles to.</p>", plain_text_body: "Hello World The easiest way to get started with React is to use this Hello World example code on CodePen. You don't need to install anything; you can just open it in another tab and follow along as we go through examples. If you'd rather use a local development environment, check out the Installation page. The smallest React example looks like this: ReactDOM.render( <h1>Hello, world!</h1>, document.getElementById('root') ); It renders a header saying 'Hello World' on the page. The next few sections will gradually introduce you to using React. We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces. A Note on JavaScript
React is a JavaScript library, and so it assumes you have a basic understanding of the JavaScript language. If you don't feel very confident, we recommend refreshing your JavaScript knowledge so you can follow along more easily. We also use some of the ES6 syntax in the examples. We try to use it sparingly because it's still relatively new, but we encourage you to get familiar with arrow functions, classes, template literals, let, and const statements. You can use Babel REPL to check what ES6 code compiles to.", author_id: user1.id, notebook_id: notebook1.id)

note4 = Note.create!(title: "Ruby", body: "<p><span class='ql-size-huge' style='color: rgb(161, 0, 0);'>Ruby Sparkles</span></p><p><br></p><p>Take a true object-oriented language, such as Smalltalk. Drop the unfamiliar syntax and move to more conventional, file-based source code. Now add in a good measure of the flexibility and convenience of languages such as Python and Perl.</p><p><br></p><p>You end up with Ruby.</p><p><br></p><p>OO aficionados will find much to like in Ruby: things such as pure object orientation (everything's an object), metaclasses, closures, iterators, and ubiquitous heterogeneous collections. Smalltalk users will feel right at home (and C++ and Java users will feel jealous).</p><p><br></p><p>At the same time, Perl and Python wizards will find many of their favorite features: full regular expression support, tight integration with the underlying operating system, convenient shortcuts, and dynamic evaluation.</p><p><br></p><p>Ruby is easy to learn. Everyday tasks are simple to code, and once you've done them, they are easy to maintain and grow. Apparently difficult things often turn out not to have been difficult after all. Ruby follows the&nbsp;Principle of Least Surprise---things work the way you would expect them to, with very few special cases or exceptions. And that really&nbsp;does&nbsp;make a difference when you're programming.</p><p><br></p><p>We call Ruby a&nbsp;transparent&nbsp;language. By that we mean that Ruby doesn't obscure the solutions you write behind lots of syntax and the need to churn out reams of support code just to get simple things done. With Ruby you write programs close to the problem domain. Rather than constantly mapping your ideas and designs down to the pedestrian level of most languages, with Ruby you'll find you can express them directly and express them elegantly. This means you code faster. It also means your programs stay readable and maintainable.</p><p><br></p><p>Using Ruby, we are constantly amazed at how much code we can write in one sitting, code that works the first time. There are very few syntax errors, no type violations, and far fewer bugs than usual. This makes sense: there's less to get wrong. No bothersome semicolons to type mechanically at the end of each line. No troublesome type declarations to keep in sync (especially in separate files). No unnecessary words just to keep the compiler happy. No error-prone framework code.</p><p><br></p><p>So why learn Ruby? Because we think it will help you program&nbsp;better. It will help you to focus on the problem at hand, with fewer distractions. It will make your life easier.</p><p><br></p><p><br></p>", plain_text_body: "Ruby Sparkles Take a true object-oriented language, such as Smalltalk. Drop the unfamiliar syntax and move to more conventional, file-based source code. Now add in a good measure of the flexibility and convenience of languages such as Python and Perl. You end up with Ruby. OO aficionados will find much to like in Ruby: things such as pure object orientation (everything's an object), metaclasses, closures, iterators, and ubiquitous heterogeneous collections. Smalltalk users will feel right at home (and C++ and Java users will feel jealous). At the same time, Perl and Python wizards will find many of their favorite features: full regular expression support, tight integration with the underlying operating system, convenient shortcuts, and dynamic evaluation. Ruby is easy to learn. Everyday tasks are simple to code, and once you've done them, they are easy to maintain and grow. Apparently difficult things often turn out not to have been difficult after all. Ruby follows the Principle of Least Surprise---things work the way you would expect them to, with very few special cases or exceptions. And that really does make a difference when you're programming. We call Ruby a transparent language. By that we mean that Ruby doesn't obscure the solutions you write behind lots of syntax and the need to churn out reams of support code just to get simple things done. With Ruby you write programs close to the problem domain. Rather than constantly mapping your ideas and designs down to the pedestrian level of most languages, with Ruby you'll find you can express them directly and express them elegantly. This means you code faster. It also means your programs stay readable and maintainable. Using Ruby, we are constantly amazed at how much code we can write in one sitting, code that works the first time. There are very few syntax errors, no type violations, and far fewer bugs than usual. This makes sense: there's less to get wrong. No bothersome semicolons to type mechanically at the end of each line. No troublesome type declarations to keep in sync (especially in separate files). No unnecessary words just to keep the compiler happy. No error-prone framework code. So why learn Ruby? Because we think it will help you program better. It will help you to focus on the problem at hand, with fewer distractions. It will make your life easier.", author_id: user1.id, notebook_id: notebook1.id)

note5 = Note.create!(title: "JavaScript", body: "<p><strong class='ql-size-large'>What is JavaScript?</strong></p><h2><br></h2><p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p><p><br></p><p>JavaScript contains a standard library of objects, such as&nbsp;<code>Array</code>,&nbsp;<code>Date</code>, and&nbsp;<code>Math</code>, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p><p><br></p><ul><li><em>Client-side JavaScript</em>&nbsp;extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li></ul><p><br></p><ul><li><em>Server-side JavaScript</em>&nbsp;extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li></ul>", plain_text_body: "What is JavaScript? JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them. JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example: Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation. Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.", author_id: user1.id, notebook_id: notebook1.id)

note6 = Note.create!(title: "JavaScript Inheritance", body: "<h3><strong class='ql-size-large' style='color: rgb(153, 51, 255);'>Inheriting properties</strong></h3><p><br></p><p>JavaScript objects are dynamic 'bags' of properties (referred to as&nbsp;<strong>own properties</strong>). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.</p><p><br></p><p>Here is what happens when trying to access a property:</p><p><br></p><pre class='ql-syntax' spellcheck='false'>// Let's assume we have object o, with its own properties a and b:
// {a: 1, b: 2}
// o.[[Prototype]] has properties b and c:
// {b: 3, c: 4}
// Finally, o.[[Prototype]].[[Prototype]] is null.
// This is the end of the prototype chain, as null,
// by definition, has no [[Prototype]].
// Thus, the full prototype chain looks like:
// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; null

console.log(o.a); // 1
// Is there an 'a' own property on o? Yes, and its value is 1.

console.log(o.b); // 2
// Is there a 'b' own property on o? Yes, and its value is 2.
// The prototype also has a 'b' property, but it's not visited.
// This is called 'property shadowing.'

console.log(o.c); // 4
// Is there a 'c' own property on o? No, check its prototype.
// Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4.

console.log(o.d); // undefined
// Is there a 'd' own property on o? No, check its prototype.
// Is there a 'd' own property on o.[[Prototype]]? No, check its prototype.
// o.[[Prototype]].[[Prototype]] is null, stop searching,
// no property found, return undefined.
</pre><p><br></p><p>Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a&nbsp;getter or a setter.</p><p><br></p>", plain_text_body: "Inheriting properties JavaScript objects are dynamic 'bags' of properties (referred to as own properties). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached. Here is what happens when trying to access a property: // Let's assume we have object o, with its own properties a and b: // {a: 1, b: 2} // o.[[Prototype]] has properties b and c: // {b: 3, c: 4} // Finally, o.[[Prototype]].[[Prototype]] is null. // This is the end of the prototype chain, as null, // by definition, has no [[Prototype]]. // Thus, the full prototype chain looks like: // {a: 1, b: 2} ---> {b: 3, c: 4} ---> null console.log(o.a); // 1 // Is there an 'a' own property on o? Yes, and its value is 1. console.log(o.b); // 2 // Is there a 'b' own property on o? Yes, and its value is 2. // The prototype also has a 'b' property, but it's not visited. // This is called 'property shadowing.' console.log(o.c); // 4 // Is there a 'c' own property on o? No, check its prototype. // Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4. console.log(o.d); // undefined // Is there a 'd' own property on o? No, check its prototype. // Is there a 'd' own property on o.[[Prototype]]? No, check its prototype. // o.[[Prototype]].[[Prototype]] is null, stop searching, // no property found, return undefined. Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when there is an inherited property with a getter or a setter.", author_id: user1.id, notebook_id: notebook1.id)

note7 = Note.create!(title: "MySQL", body: "<h3><strong class='ql-size-large' style='color: rgb(0, 102, 204);'>The Main Features of MySQL</strong></h3><p><br></p><h4><strong>Internals and Portability</strong></h4><p><br></p><ul><li>Written in C and C++.</li><li>Tested with a broad range of different compilers.</li><li>Works on many different platforms. See&nbsp;http://www.mysql.com/support/supportedplatforms/database.html.</li><li>For portability, uses&nbsp;<strong>CMake</strong>&nbsp;in MySQL 5.5 and up. Previous series use GNU Automake, Autoconf, and Libtool.</li><li>Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (<a href='http://developer.kde.org/~sewardj/' target='_blank' style='color: rgb(0, 116, 163);'>http://developer.kde.org/~sewardj/</a>).</li><li>Uses multi-layered server design with independent modules.</li><li>Designed to be fully multi-threaded using kernel threads, to easily use multiple CPUs if they are available.</li><li>Provides transactional and nontransactional storage engines.</li><li>Uses very fast B-tree disk tables (MyISAM) with index compression.</li><li>Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database.</li><li>Uses a very fast thread-based memory allocation system.</li><li>Executes very fast joins using an optimized nested-loop join.</li><li>Implements in-memory hash tables, which are used as temporary tables.</li><li>Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization.</li><li>Provides the server as a separate program for use in a client/server networked environment, and as a library that can be embedded (linked) into standalone applications. Such applications can be used in isolation or in environments where no network is available.</li></ul><p><br></p><h4><strong>Data Types</strong></h4><p><br></p><ul><li>Many data types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long,&nbsp;FLOAT,&nbsp;DOUBLE,&nbsp;CHAR,&nbsp;VARCHAR,&nbsp;BINARY,&nbsp;VARBINARY,&nbsp;TEXT,&nbsp;BLOB,&nbsp;DATE,&nbsp;TIME,&nbsp;DATETIME, TIMESTAMP,&nbsp;YEAR,&nbsp;SET,&nbsp;ENUM, and OpenGIS spatial types. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/data-types.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;11,&nbsp;<em>Data Types</em></a>.</li><li>Fixed-length and variable-length string types.</li></ul><p><br></p><h4><strong>Statements and Functions</strong></h4><ul><li>Full operator and function support in the&nbsp;SELECT&nbsp;list and&nbsp;WHERE&nbsp;clause of queries. For example:</li></ul><p><br></p><pre class='ql-syntax' spellcheck='false'>mysql&gt; SELECT CONCAT(first_name, ' ', last_name)
    -&gt; FROM citizen
    -&gt; WHERE income/dependents &gt; 10000 AND age &gt; 30;

</pre><p><br></p><ul><li>Full support for SQL&nbsp;GROUP BY&nbsp;and&nbsp;ORDER BY&nbsp;clauses. Support for group functions (COUNT(),&nbsp;AVG(),&nbsp;STD(),&nbsp;SUM(),&nbsp;MAX(),&nbsp;MIN(), and&nbsp;GROUP_CONCAT()).</li><li>Support for&nbsp;LEFT OUTER JOIN&nbsp;and&nbsp;RIGHT OUTER JOIN&nbsp;with both standard SQL and ODBC syntax.</li><li>Support for aliases on tables and columns as required by standard SQL.</li><li>Support for&nbsp;DELETE,&nbsp;INSERT,&nbsp;REPLACE, and&nbsp;UPDATE&nbsp;to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server.</li><li>Support for MySQL-specific&nbsp;SHOW&nbsp;statements that retrieve information about databases, storage engines, tables, and indexes. Support for the&nbsp;INFORMATION_SCHEMAdatabase, implemented according to standard SQL.</li><li>An&nbsp;EXPLAIN&nbsp;statement to show how the optimizer resolves a query.</li><li>Independence of function names from table or column names. For example,&nbsp;ABS&nbsp;is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the&nbsp;'<code style='color: black;'>(</code>'&nbsp;that follows it. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/keywords.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;9.3, 'Keywords and Reserved Words'</a>.</li><li>You can refer to tables from different databases in the same statement.</li></ul><p><br></p><h4><strong>Security</strong></h4><p><br></p><ul><li>A privilege and password system that is very flexible and secure, and that enables host-based verification.</li><li>Password security by encryption of all password traffic when you connect to a server.</li></ul><p><br></p><h4><strong>Scalability and Limits</strong></h4><p><br></p><ul><li>Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows.</li><li>Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for&nbsp;InnoDB&nbsp;tables is either 767 bytes or 3072 bytes. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/innodb-restrictions.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;14.8.1.7, 'Limits on InnoDB Tables'</a>. The maximum index width for&nbsp;MyISAM&nbsp;tables is 1000 bytes. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;15.2, 'The MyISAM Storage Engine'</a>. An index may use a prefix of a column for&nbsp;CHAR,&nbsp;VARCHAR,&nbsp;BLOB, or&nbsp;TEXT&nbsp;column types.</li></ul><p><br></p><h4><strong>Connectivity</strong></h4><p><br></p><ul><li>Clients can connect to MySQL Server using several protocols:</li><li>Clients can connect using TCP/IP sockets on any platform.</li><li>On Windows systems, clients can connect using named pipes if the server is started with the&nbsp;--enable-named-pipe&nbsp;option. Windows servers also support shared-memory connections if started with the&nbsp;--shared-memory&nbsp;option. Clients can connect through shared memory by using the&nbsp;--protocol=memory&nbsp;option.</li><li>On Unix systems, clients can connect using Unix domain socket files.</li><li>MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings.</li><li>APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/connectors-apis.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;27,&nbsp;<em>Connectors and APIs</em></a>.</li><li>The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See&nbsp;<a href='https://dev.mysql.com/doc/connector-odbc/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/ODBC Developer Guide</a>.</li><li>The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See&nbsp;<a href='https://dev.mysql.com/doc/connector-j/5.1/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/J 5.1 Developer Guide</a>.</li><li>MySQL Connector/Net enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/Net is a fully managed ADO.NET driver written in 100% pure C#. See&nbsp;<a href='https://dev.mysql.com/doc/connector-net/en/' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Connector/Net Developer Guide</a>.</li></ul><p><br></p><h4><strong>Localization</strong></h4><p><br></p><ul><li>The server can provide error messages to clients in many languages. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/error-message-language.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.2, 'Setting the Error Message Language'</a>.</li><li>Full support for several different character sets, including&nbsp;latin1&nbsp;(cp1252),&nbsp;german,&nbsp;big5,&nbsp;ujis, several Unicode character sets, and more. For example, the Scandinavian characters&nbsp;'Ã¥',&nbsp;'Ã¤'&nbsp;and&nbsp;'Ã¶'&nbsp;are permitted in table and column names.</li><li>All data is saved in the chosen character set.</li><li>Sorting and comparisons are done according to the default character set and collation. is possible to change this when the MySQL server is started (see <a href='https://dev.mysql.com/doc/refman/5.7/en/charset-server.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.1.3.2, 'Server Character Set and Collation'</a>). To see an example of very advanced sorting, look at the Czech sorting code. MySQL Server supports many different character sets that can be specified at compile time and runtime.</li><li>The server time zone can be changed dynamically, and individual clients can specify their own time zone. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html' target='_blank' style='color: rgb(0, 116, 163);'>Section&nbsp;10.6, 'MySQL Server Time Zone Support'</a>.</li></ul><p><br></p><h4><strong>Clients and Tools</strong></h4><p><br></p><ul><li>MySQL includes several client and utility programs. These include both command-line programs such as&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqldump</strong></a>&nbsp;and&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/mysqladmin.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqladmin</strong></a>, and graphical programs such as&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/workbench.html' target='_blank' style='color: rgb(0, 116, 163);'>MySQL Workbench</a>.</li><li>MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the <a href='https://dev.mysql.com/doc/refman/5.7/en/mysqlcheck.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>mysqlcheck</strong></a>&nbsp;client. MySQL also includes&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/myisamchk.html' target='_blank' style='color: rgb(0, 116, 163);'><strong>myisamchk</strong></a>, a very fast command-line utility for performing these operations on&nbsp;MyISAM&nbsp;tables. See&nbsp;<a href='https://dev.mysql.com/doc/refman/5.7/en/programs.html' target='_blank' style='color: rgb(0, 116, 163);'>Chapter&nbsp;4,&nbsp;<em>MySQL Programs</em></a>.</li><li>MySQL programs can be invoked with the&nbsp;--help&nbsp;or&nbsp;-?&nbsp;option to obtain online assistance.</li></ul><p><br></p>", plain_text_body: "The Main Features of MySQL Internals and Portability Written in C and C++. Tested with a broad range of different compilers. Works on many different platforms. See http://www.mysql.com/support/supportedplatforms/database.html. For portability, uses CMake in MySQL 5.5 and up. Previous series use GNU Automake, Autoconf, and Libtool. Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (http://developer.kde.org/~sewardj/). Uses multi-layered server design with independent modules. Designed to be fully multi-threaded using kernel threads, to easily use multiple CPUs if they are available.
Provides transactional and nontransactional storage engines.
Uses very fast B-tree disk tables (MyISAM) with index compression.
Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database. Uses a very fast thread-based memory allocation system.
Executes very fast joins using an optimized nested-loop join.
Implements in-memory hash tables, which are used as temporary tables.
Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization. Provides the server as a separate program for use in a client/server networked environment, and as a library that can be embedded (linked) into standalone applications. Such applications can be used in isolation or in environments where no network is available. Data Types Many data types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long, FLOAT, DOUBLE, CHAR, VARCHAR, BINARY, VARBINARY, TEXT, BLOB, DATE, TIME, DATETIME, TIMESTAMP, YEAR, SET, ENUM, and OpenGIS spatial types. See Chapter 11, Data Types.
Fixed-length and variable-length string types. Statements and Functions
Full operator and function support in the SELECT list and WHERE clause of queries. For example: mysql> SELECT CONCAT(first_name, ' ', last_name) -> FROM citizen -> WHERE income/dependents > 10000 AND age > 30; Full support for SQL GROUP BY and ORDER BY clauses. Support for group functions (COUNT(), AVG(), STD(), SUM(), MAX(), MIN(), and GROUP_CONCAT()). Support for LEFT OUTER JOIN and RIGHT OUTER JOIN with both standard SQL and ODBC syntax. Support for aliases on tables and columns as required by standard SQL. Support for DELETE, INSERT, REPLACE, and UPDATE to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server. Support for MySQL-specific SHOW statements that retrieve information about databases, storage engines, tables, and indexes. Support for the INFORMATION_SCHEMAdatabase, implemented according to standard SQL. An EXPLAIN statement to show how the optimizer resolves a query. Independence of function names from table or column names. For example, ABS is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the '(' that follows it. See Section 9.3, 'Keywords and Reserved Words'. You can refer to tables from different databases in the same statement. Security A privilege and password system that is very flexible and secure, and that enables host-based verification. Password security by encryption of all password traffic when you connect to a server. Scalability and Limits Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows. Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for InnoDB tables is either 767 bytes or 3072 bytes. See Section 14.8.1.7, 'Limits on InnoDB Tables'. The maximum index width for MyISAM tables is 1000 bytes. See Section 15.2, 'The MyISAM Storage Engine'. An index may use a prefix of a column for CHAR, VARCHAR, BLOB, or TEXT column types. Connectivity Clients can connect to MySQL Server using several protocols: Clients can connect using TCP/IP sockets on any platform. On Windows systems, clients can connect using named pipes if the server is started with the --enable-named-pipe option. Windows servers also support shared-memory connections if started with the --shared-memory option. Clients can connect through shared memory by using the --protocol=memory option. On Unix systems, clients can connect using Unix domain socket files. MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings. APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See Chapter 27, Connectors and APIs. The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See MySQL Connector/ODBC Developer Guide. The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See MySQL Connector/J 5.1 Developer Guide. MySQL Connector/Net enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/Net is a fully managed ADO.NET driver written in 100% pure C#. See MySQL Connector/Net Developer Guide. Localization The server can provide error messages to clients in many languages. See Section 10.2, 'Setting the Error Message Language'. Full support for several different character sets, including latin1 (cp1252), german, big5, ujis, several Unicode character sets, and more. For example, the Scandinavian characters 'Ã¥', 'Ã¤' and 'Ã¶' are permitted in table and column names. All data is saved in the chosen character set. Sorting and comparisons are done according to the default character set and collation. is possible to change this when the MySQL server is started (see Section 10.1.3.2, 'Server Character Set and Collation'). To see an example of very advanced sorting, look at the Czech sorting code. MySQL Server supports many different character sets that can be specified at compile time and runtime. The server time zone can be changed dynamically, and individual clients can specify their own time zone. See Section 10.6, 'MySQL Server Time Zone Support'. Clients and Tools MySQL includes several client and utility programs. These include both command-line programs such as mysqldump and mysqladmin, and graphical programs such as MySQL Workbench. MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the mysqlcheck client. MySQL also includes myisamchk, a very fast command-line utility for performing these operations on MyISAM tables. See Chapter 4, MySQL Programs. MySQL programs can be invoked with the --help or -? option to obtain online assistance.", author_id: user1.id, notebook_id: notebook1.id)

note8 = Note.create!(title: "What is MySQL?", body: "<ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL is a database management system.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network. To add, access, and process data stored in a computer database, you need a database management system such as MySQL Server. Since computers are very good at handling large amounts of data, database management systems play a central role in computing, as standalone utilities, or as parts of other applications.</span></p><p><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL databases are relational.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>A relational database stores data in separate tables rather than putting all the data in one big storeroom. The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views, rows, and columns, offers a flexible programming environment. You set up rules governing the relationships between different data fields, such as one-to-one, one-to-many, unique, required or optional, and&nbsp;'pointers'&nbsp;between different tables. The database enforces these rules, so that with a well-designed database, your application never sees inconsistent, duplicate, orphan, out-of-date, or missing data.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>The SQL part of&nbsp;'MySQL'&nbsp;stands for&nbsp;'Structured Query Language'. SQL is the most common standardized language used to access databases. Depending on your programming environment, you might enter SQL directly (for example, to generate reports), embed SQL statements into code written in another language, or use a language-specific API that hides the SQL syntax.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>SQL is defined by the ANSI/ISO SQL Standard. The SQL standard has been evolving since 1986 and several versions exist. In this manual,&nbsp;'SQL-92'&nbsp;refers to the standard released in 1992,&nbsp;'SQL:1999'&nbsp;refers to the standard released in 1999, and&nbsp;'SQL:2003'&nbsp;refers to the current version of the standard. We use the phrase&nbsp;'the SQL standard'&nbsp;to mean the current version of the SQL Standard at any time.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL software is Open Source.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the Internet and use it without paying anything. If you wish, you may study the source code and change it to suit your needs. The MySQL software uses the GPL (GNU General Public License),&nbsp;</span><a href='http://www.fsf.org/licenses/' target='_blank' class='ql-size-large' style='color: rgb(0, 116, 163);'>http://www.fsf.org/licenses/</a><span class='ql-size-large'>, to define what you may and may not do with the software in different situations. If you feel uncomfortable with the GPL or need to embed MySQL code into a commercial application, you can buy a commercially licensed version from us. See the MySQL Licensing Overview for more information (</span><a href='http://www.mysql.com/company/legal/licensing/' target='_blank' class='ql-size-large' style='color: rgb(0, 116, 163);'>http://www.mysql.com/company/legal/licensing/</a><span class='ql-size-large'>).</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>The MySQL Database Server is very fast, reliable, scalable, and easy to use.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>If that is what you are looking for, you should give it a try. MySQL Server can run comfortably on a desktop or laptop, alongside your other applications, web servers, and so on, requiring little or no attention. If you dedicate an entire machine to MySQL, you can adjust the settings to take advantage of all the memory, CPU power, and I/O capacity available. MySQL can also scale up to clusters of machines, networked together.</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>MySQL Server was originally developed to handle large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years. Although under constant development, MySQL Server today offers a rich and useful set of functions. Its connectivity, speed, and security make MySQL Server highly suited for accessing databases on the Internet.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>MySQL Server works in client/server or embedded systems.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>The MySQL Database Software is a client/server system that consists of a multi-threaded SQL server that supports different back ends, several different client programs and libraries, administrative tools, and a wide range of application programming interfaces (APIs).</span></p><p class='ql-indent-1'><br></p><p class='ql-indent-1'><span class='ql-size-large'>We also provide MySQL Server as an embedded multi-threaded library that you can link into your application to get a smaller, faster, easier-to-manage standalone product.</span></p><p class='ql-indent-1'><br></p><ul><li><strong style='color: rgb(68, 68, 68);' class='ql-size-large'><em>A large amount of contributed MySQL software is available.</em></strong></li></ul><p><br></p><p class='ql-indent-1'><span class='ql-size-large'>MySQL Server has a practical set of features developed in close cooperation with our users. It is very likely that your favorite application or language supports the MySQL Database Server.</span></p><p class='ql-indent-1'><br></p><p><span class='ql-size-large'>The official way to pronounce&nbsp;'MySQL'&nbsp;is&nbsp;'My Ess Que Ell'&nbsp;(not&nbsp;'my sequel'), but we do not mind if you pronounce it as&nbsp;'my sequel'&nbsp;or in some other localized way.</span></p>", plain_text_body: "MySQL is a database management system. A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network. To add, access, and process data stored in a computer database, you need a database management system such as MySQL Server. Since computers are very good at handling large amounts of data, database management systems play a central role in computing, as standalone utilities, or as parts of other applications. MySQL databases are relational. A relational database stores data in separate tables rather than putting all the data in one big storeroom. The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views, rows, and columns, offers a flexible programming environment. You set up rules governing the relationships between different data fields, such as one-to-one, one-to-many, unique, required or optional, and 'pointers' between different tables. The database enforces these rules, so that with a well-designed database, your application never sees inconsistent, duplicate, orphan, out-of-date, or missing data. The SQL part of 'MySQL' stands for 'Structured Query Language'. SQL is the most common standardized language used to access databases. Depending on your programming environment, you might enter SQL directly (for example, to generate reports), embed SQL statements into code written in another language, or use a language-specific API that hides the SQL syntax. SQL is defined by the ANSI/ISO SQL Standard. The SQL standard has been evolving since 1986 and several versions exist. In this manual, 'SQL-92' refers to the standard released in 1992, 'SQL:1999' refers to the standard released in 1999, and 'SQL:2003' refers to the current version of the standard. We use the phrase 'the SQL standard' to mean the current version of the SQL Standard at any time. MySQL software is Open Source. Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the Internet and use it without paying anything. If you wish, you may study the source code and change it to suit your needs. The MySQL software uses the GPL (GNU General Public License), http://www.fsf.org/licenses/, to define what you may and may not do with the software in different situations. If you feel uncomfortable with the GPL or need to embed MySQL code into a commercial application, you can buy a commercially licensed version from us. See the MySQL Licensing Overview for more information (http://www.mysql.com/company/legal/licensing/). The MySQL Database Server is very fast, reliable, scalable, and easy to use. If that is what you are looking for, you should give it a try. MySQL Server can run comfortably on a desktop or laptop, alongside your other applications, web servers, and so on, requiring little or no attention. If you dedicate an entire machine to MySQL, you can adjust the settings to take advantage of all the memory, CPU power, and I/O capacity available. MySQL can also scale up to clusters of machines, networked together. MySQL Server was originally developed to handle large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years. Although under constant development, MySQL Server today offers a rich and useful set of functions. Its connectivity, speed, and security make MySQL Server highly suited for accessing databases on the Internet. MySQL Server works in client/server or embedded systems. The MySQL Database Software is a client/server system that consists of a multi-threaded SQL server that supports different back ends, several different client programs and libraries, administrative tools, and a wide range of application programming interfaces (APIs). We also provide MySQL Server as an embedded multi-threaded library that you can link into your application to get a smaller, faster, easier-to-manage standalone product. A large amount of contributed MySQL software is available. MySQL Server has a practical set of features developed in close cooperation with our users. It is very likely that your favorite application or language supports the MySQL Database Server. The official way to pronounce 'MySQL' is 'My Ess Que Ell' (not 'my sequel'), but we do not mind if you pronounce it as 'my sequel' or in some other localized way.", author_id: user1.id, notebook_id: notebook1.id)

note9 = Note.create!(title: "ActiveRecord", body: "<h3><strong>What is Active Record?</strong></h3><p><br></p><p>Active Record is the M in&nbsp;<a href='http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller' target='_blank' style='color: rgb(152, 9, 5);'>MVC</a>&nbsp;- the model - which is the layer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database. It is an implementation of the Active Record pattern which itself is a description of an Object Relational Mapping system.</p><p><br></p><h4><strong>The Active Record Pattern</strong></h4><p><br></p><p><a href='http://www.martinfowler.com/eaaCatalog/activeRecord.html' target='_blank' style='color: rgb(152, 9, 5);'>Active Record was described by Martin Fowler</a>&nbsp;in his book&nbsp;<em>Patterns of Enterprise Application Architecture</em>. In Active Record, objects carry both persistent data and behavior which operates on that data. Active Record takes the opinion that ensuring data access logic as part of the object will educate users of that object on how to write to and read from the database.</p><p><br></p><h4><strong>Object Relational Mapping</strong></h4><p><br></p><p>Object Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code.</p><p><br></p><h4><strong>Active Record as an ORM Framework</strong></h4><p><br></p><p>Active Record gives us several mechanisms, the most important being the ability to:</p><ul><li>Represent models and their data.</li><li>Represent associations between these models.</li><li>Represent inheritance hierarchies through related models.</li><li>Validate models before they get persisted to the database.</li><li>Perform database operations in an object-oriented fashion.</li></ul><p><br></p>", plain_text_body: "What is Active Record? Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database. It is an implementation of the Active Record pattern which itself is a description of an Object Relational Mapping system. The Active Record Pattern Active Record was described by Martin Fowler in his book Patterns of Enterprise Application Architecture. In Active Record, objects carry both persistent data and behavior which operates on that data. Active Record takes the opinion that ensuring data access logic as part of the object will educate users of that object on how to write to and read from the database. Object Relational Mapping Object Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code. Active Record as an ORM Framework Active Record gives us several mechanisms, the most important being the ability to: Represent models and their data. Represent associations between these models. Represent inheritance hierarchies through related models. Validate models before they get persisted to the database. Perform database operations in an object-oriented fashion.
", author_id: user1.id, notebook_id: notebook1.id)

note10 = Note.create!(title: "Capybara", body: "<p><span style='background-color: rgb(255, 255, 255); color: rgb(36, 41, 46);'>Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem.</span></p><p><br></p><p><span class='ql-size-large'>Key benefits</span></p><p><br></p><ul><li>No setup&nbsp;necessary for Rails and Rack application. Works out of the box.</li></ul><p><br></p><ul><li>Intuitive API&nbsp;which mimics the language an actual user would use.</li></ul><p><br></p><ul><li>Switch the backend&nbsp;your tests run against from fast headless mode to an actual browser with no changes to your tests.</li></ul><p><br></p><ul><li>Powerful synchronization&nbsp;features mean you never have to manually wait for asynchronous processes to complete.</li></ul><p><br></p>", plain_text_body: "Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem. Key benefits No setup necessary for Rails and Rack application. Works out of the box. Intuitive API which mimics the language an actual user would use. Switch the backend your tests run against from fast headless mode to an actual browser with no changes to your tests. Powerful synchronization features mean you never have to manually wait for asynchronous processes to complete.", author_id: user1.id, notebook_id: notebook1.id)

note11 = Note.create!(title: "The EveryGirl", body: "<ol><li><strong>2 proteins:</strong>&nbsp;Select&nbsp;one cooked or prepared protein and a raw protein. Pre-marinated or prepared meats, such as a&nbsp;rotisserie chicken,&nbsp;help&nbsp;reduce&nbsp;cooking time while bringing home a few fillets of fresh fish challenges you to be creative.</li><li><strong>2 veggies:</strong> Choose seasonal, fresh produce that can be easily roasted or steamed to serve as a side.</li><li><strong>2 fruits:</strong> We often purchase too many fruits, and then they spoil.&nbsp;Pick just two that youâ€™d want to eat with yogurt or to grab for&nbsp;on-the-go mornings.</li><li><strong>Herb-du-jour:</strong>&nbsp;All you need is a handful of herbs to add a dab of freshness&nbsp;to your morning eggs or to spruce up your choice of protein.&nbsp;</li><li><strong>A dozen eggs:</strong>&nbsp;Eggs (preferably the pretty brown ones!)&nbsp;are a weekly essential that can be used any meal or snack throughout&nbsp;the day.&nbsp;</li><li><strong>Greek yogurt:</strong>&nbsp;Aside from being a quick and healthy breakfast choice, we like to use Greek yogurt in creative waysâ€“in place of&nbsp;mayonnaise in chicken salads and instead of sour cream for tacos.</li><li><strong>Choice of cheese:</strong>&nbsp;Always a fun part of shopping! Pick one cheese that you can add to omelets, mix&nbsp;into a salad, or eat on its own.</li><li><strong>Choice of grain:&nbsp;</strong>Unless youâ€™re on a carb-free diet, we think itâ€™s always a good idea to experiment with grains, such as Basmati rice or quinoa, to round off a meal and make you feel full.</li><li><strong>Granola:&nbsp;</strong>Whether&nbsp;homemade&nbsp;or storebought, we love topping our morning yogurt or vanilla ice cream with a little crunch.</li><li><strong>Smart snack:</strong>&nbsp;Nuts and dried fruit&nbsp;are always a great choice, but we never rule out dark chocolate or popcorn!</li></ol>", plain_text_body: "2 proteins: Select one cooked or prepared protein and a raw protein. Pre-marinated or prepared meats, such as a rotisserie chicken, help reduce cooking time while bringing home a few fillets of fresh fish challenges you to be creative. 2 veggies: Choose seasonal, fresh produce that can be easily roasted or steamed to serve as a side. 2 fruits: We often purchase too many fruits, and then they spoil. Pick just two that youâ€™d want to eat with yogurt or to grab for on-the-go mornings. Herb-du-jour: All you need is a handful of herbs to add a dab of freshness to your morning eggs or to spruce up your choice of protein.  A dozen eggs: Eggs (preferably the pretty brown ones!) are a weekly essential that can be used any meal or snack throughout the day. Greek yogurt: Aside from being a quick and healthy breakfast choice, we like to use Greek yogurt in creative waysâ€“in place of mayonnaise in chicken salads and instead of sour cream for tacos. Choice of cheese: Always a fun part of shopping! Pick one cheese that you can add to omelets, mix into a salad, or eat on its own. Choice of grain: Unless youâ€™re on a carb-free diet, we think itâ€™s always a good idea to experiment with grains, such as Basmati rice or quinoa, to round off a meal and make you feel full. Granola: Whether homemade or storebought, we love topping our morning yogurt or vanilla ice cream with a little crunch. Smart snack: Nuts and dried fruit are always a great choice, but we never rule out dark chocolate or popcorn!", author_id: user1.id, notebook_id: notebook2.id)

note12 = Note.create!(title: "Healthy Grocery List", body:"<p><strong class='ql-size-large'>1. Bakery and Bread</strong></p><p><br></p><p>On Your List:</p><ul><li>Whole wheat bread, pita pockets, and English muffins</li><li>Whole-grain flour tortillas</li></ul><p><br></p><p><strong class='ql-size-large'>2. Meat and Seafood</strong></p><p><br></p><p>On Your List:</p><ul><li>Skinless chicken or turkey&nbsp;breasts</li><li>Ground turkey or chicken</li><li>Salmon, halibut, trout, mackerel, or your favorite seafood</li><li>Reduced-sodium lunchmeat (turkey, roast beef)</li></ul><p><br></p><p><strong class='ql-size-large'>3. Pasta and Rice</strong></p><p><br></p><p>On Your List:</p><ul><li>Brown rice</li><li>Whole wheat or whole-grain pasta</li></ul><p>Again, favor whole grains whenever possible.</p><p><br></p><p><strong class='ql-size-large'>4. Oils, Sauces, Salad Dressings, and Condiments</strong></p><p><br></p><p>On Your List:</p><ul><li>Tomato sauce</li><li>Mustard</li><li>Barbecue sauce</li><li>Red-wine vinegar</li><li>Salsa</li><li>Extra virgin olive oil, canola oil, nonfat cooking spray</li><li>Jarred capers and olives</li><li>Hot pepper sauce</li></ul><p><br></p><p><strong class='ql-size-large'>5. Cereals and Breakfast Foods</strong></p><p><br></p><p>On Your List:</p><ul><li>Whole-grain or multigrain cereals</li><li>Steel-cut or instant oatmeal</li><li>Whole-grain cereal bars</li></ul><p><br></p><p><strong class='ql-size-large'>6. Soups and Canned Goods</strong></p><p><br></p><p>On Your List:</p><ul><li>Diced or whole peeled tomatoes</li><li>Tuna or salmon packed in water</li><li>Low-sodium soups and broths</li><li>Black,&nbsp;kidney, soy, or garbanzo beans; lentils, split peas</li><li>Diced green chilies</li></ul><p><br></p><p><strong class='ql-size-large'>7. Frozen Foods</strong></p><p><br></p><p>On Your List:</p><ul><li>Frozen vegetables: broccoli, spinach, peas, and carrots (no sauce)</li><li>Frozen fruit: strawberries, raspberries, blueberries (without added sugar)</li><li>Frozen shrimp</li><li>Pre-portioned, low-fat ice cream or frozen yogurt</li><li>Whole-grain waffles</li><li>Whole-grain vegetable pizza</li></ul><p><br></p><p><strong class='ql-size-large'>8. Dairy, Cheese, and Eggs</strong></p><p><br></p><p>On Your List:</p><ul><li>Skim or low-fat milk or soymilk</li><li>Fat-free or low-fat yogurt</li><li>Fat-free or low-fat cottage cheese</li><li>Low-fat cheese or string cheese snacks</li><li>Eggs or egg substitutes</li><li>Firm tofu</li><li>Butter or spread (a variety that doesn't contain hydrogenated oils)</li></ul>", plain_text_body: "1. Bakery and Bread On Your List: Whole wheat bread, pita pockets, and English muffins Whole-grain flour tortillas 2. Meat and Seafood On Your List: Skinless chicken or turkey breasts Ground turkey or chicken Salmon, halibut, trout, mackerel, or your favorite seafood Reduced-sodium lunchmeat (turkey, roast beef) 3. Pasta and Rice On Your List: Brown rice Whole wheat or whole-grain pasta Again, favor whole grains whenever possible. 4. Oils, Sauces, Salad Dressings, and Condiments On Your List: Tomato sauce Mustard Barbecue sauce Red-wine vinegar Salsa Extra virgin olive oil, canola oil, nonfat cooking spray Jarred capers and olives Hot pepper sauce 5. Cereals and Breakfast Foods On Your List: Whole-grain or multigrain cereals Steel-cut or instant oatmeal Whole-grain cereal bars 6. Soups and Canned Goods On Your List: Diced or whole peeled tomatoes Tuna or salmon packed in water Low-sodium soups and broths Black, kidney, soy, or garbanzo beans; lentils, split peas Diced green chilies 7. Frozen Foods On Your List: Frozen vegetables: broccoli, spinach, peas, and carrots (no sauce) Frozen fruit: strawberries, raspberries, blueberries (without added sugar) Frozen shrimp Pre-portioned, low-fat ice cream or frozen yogurt Whole-grain waffles Whole-grain vegetable pizza 8. Dairy, Cheese, and Eggs On Your List: Skim or low-fat milk or soymilk Fat-free or low-fat yogurt Fat-free or low-fat cottage cheese Low-fat cheese or string cheese snacks Eggs or egg substitutes Firm tofu Butter or spread (a variety that doesn't contain hydrogenated oils)", author_id: user1.id, notebook_id: notebook2.id)

tag1 = Tag.create!(name: "school", author_id: user1.id)
tag2 = Tag.create!(name: "travel", author_id: user1.id)
tag3 = Tag.create!(name: "work", author_id: user1.id)
tag5 = Tag.create!(name: "shop", author_id: user1.id)
tag6 = Tag.create!(name: "important", author_id: user1.id)
tag7 = Tag.create!(name: "recipe", author_id: user1.id)
tag8 = Tag.create!(name: "family", author_id: user1.id)
tag9 = Tag.create!(name: "sports", author_id: user1.id)
tag10 = Tag.create!(name: "music", author_id: user1.id)

tagging1 = Tagging.create!(note_id: note1.id, tag_name: tag1.name)
tagging2 = Tagging.create!(note_id: note2.id, tag_name: tag1.name)
tagging3 = Tagging.create!(note_id: note3.id, tag_name: tag1.name)
tagging4 = Tagging.create!(note_id: note4.id, tag_name: tag1.name)
tagging5 = Tagging.create!(note_id: note5.id, tag_name: tag1.name)
tagging6 = Tagging.create!(note_id: note6.id, tag_name: tag1.name)
tagging7 = Tagging.create!(note_id: note7.id, tag_name: tag1.name)
tagging8 = Tagging.create!(note_id: note8.id, tag_name: tag1.name)
tagging9 = Tagging.create!(note_id: note9.id, tag_name: tag1.name)
tagging10 = Tagging.create!(note_id: note10.id, tag_name: tag1.name)
tagging11 = Tagging.create!(note_id: note11.id, tag_name: tag5.name)
